/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
SET extra_float_digits = 0;
LOAD 'postgraph';
SET search_path TO postgraph;
SELECT * FROM create_graph('expr');
NOTICE:  graph "expr" has been created
 create_graph 
--------------
 
(1 row)

--
-- map literal
--
-- empty map
SELECT * FROM cypher('expr', $$RETURN {}$$) AS r(c gtype);
 c  
----
 {}
(1 row)

-- map of scalar values
SELECT * FROM cypher('expr', $$
RETURN {s: 's', i: 1, f: 1.0, b: true, z: null}
$$) AS r(c gtype);
                         c                          
----------------------------------------------------
 {"b": true, "f": 1.0, "i": 1, "s": "s", "z": null}
(1 row)

-- nested maps
SELECT * FROM cypher('expr', $$
RETURN {s: {s: 's'}, t: {i: 1, e: {f: 1.0}, s: {a: {b: true}}}, z: null}
$$) AS r(c gtype);
                                           c                                           
---------------------------------------------------------------------------------------
 {"s": {"s": "s"}, "t": {"e": {"f": 1.0}, "i": 1, "s": {"a": {"b": true}}}, "z": null}
(1 row)

--
-- list literal
--
-- empty list
SELECT * FROM cypher('expr', $$RETURN []$$) AS r(c gtype);
 c  
----
 []
(1 row)

-- list of scalar values
SELECT * FROM cypher('expr', $$
RETURN ['str', 1, 1.0, true, null]
$$) AS r(c gtype);
              c              
-----------------------------
 ["str", 1, 1.0, true, null]
(1 row)

-- nested lists
SELECT * FROM cypher('expr', $$
RETURN [['str'], [1, [1.0], [[true]]], null]
$$) AS r(c gtype);
                   c                   
---------------------------------------
 [["str"], [1, [1.0], [[true]]], null]
(1 row)

--
-- Timestamp
--
SELECT * FROM cypher('expr', $$
RETURN '2023-06-23 13:39:40.00'::timestamp
$$) AS r(c gtype);
            c             
--------------------------
 Fri Jun 23 13:39:40 2023
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '06/23/2023 13:39:40.00'::timestamp
$$) AS r(c gtype);
            c             
--------------------------
 Fri Jun 23 13:39:40 2023
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 'Fri Jun 23 13:39:40.00 2023"'::timestamp
$$) AS r(c gtype);
            c             
--------------------------
 Fri Jun 23 13:39:40 2023
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '06/23/1970 13:39:40.00'::timestamp
$$) AS r(c gtype);
            c             
--------------------------
 Tue Jun 23 13:39:40 1970
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 0::timestamp
$$) AS r(c gtype);
            c             
--------------------------
 Sat Jan 01 00:00:00 2000
(1 row)

SELECT * FROM cypher('expr', $$
RETURN NULL::timestamp
$$) AS r(c gtype);
 c 
---
 
(1 row)

--
-- parameter
--
PREPARE cypher_parameter(gtype) AS
SELECT * FROM cypher('expr', $$
RETURN $var
$$, $1) AS t(i gtype);
EXECUTE cypher_parameter('{"var": 1}');
 i 
---
 1
(1 row)

PREPARE cypher_parameter_object(gtype) AS
SELECT * FROM cypher('expr', $$
RETURN $var.innervar
$$, $1) AS t(i gtype);
EXECUTE cypher_parameter_object('{"var": {"innervar": 1}}');
 i 
---
 1
(1 row)

PREPARE cypher_parameter_array(gtype) AS
SELECT * FROM cypher('expr', $$
RETURN $var[$indexvar]
$$, $1) AS t(i gtype);
EXECUTE cypher_parameter_array('{"var": [1, 2, 3], "indexvar": 1}');
 i 
---
 2
(1 row)

-- missing parameter
PREPARE cypher_parameter_missing_argument(gtype) AS
SELECT * FROM cypher('expr', $$
RETURN $var, $missingvar
$$, $1) AS t(i gtype, j gtype);
EXECUTE cypher_parameter_missing_argument('{"var": 1}');
 i | j 
---+---
 1 | 
(1 row)

-- invalid parameter
PREPARE cypher_parameter_invalid_argument(gtype) AS
SELECT * FROM cypher('expr', $$
RETURN $var
$$, $1) AS t(i gtype);
EXECUTE cypher_parameter_invalid_argument('[1]');
 i 
---
 
(1 row)

-- missing parameters argument
PREPARE cypher_missing_params_argument(int) AS
SELECT $1, * FROM cypher('expr', $$
RETURN $var
$$) AS t(i gtype);
ERROR:  parameters argument is missing from cypher() function call
LINE 3: RETURN $var
               ^
SELECT * FROM cypher('expr', $$
RETURN $var
$$) AS t(i gtype);
ERROR:  parameters argument is missing from cypher() function call
LINE 2: RETURN $var
               ^
--list concatenation
SELECT * FROM cypher('expr',
$$RETURN ['str', 1, 1.0] + [true, null]$$) AS r(c gtype);
              c              
-----------------------------
 ["str", 1, 1.0, true, null]
(1 row)

--list IN (contains), should all be true
SELECT * FROM cypher('expr',
$$RETURN 1 IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 t
(1 row)

SELECT * FROM cypher('expr',
$$RETURN 'str' IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 t
(1 row)

SELECT * FROM cypher('expr',
$$RETURN 1.0 IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 t
(1 row)

SELECT * FROM cypher('expr',
$$RETURN true IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 t
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [1,3,5,[2,4,6]] IN ['str', 1, 1.0, true, null, [1,3,5,[2,4,6]]]$$) AS r(c boolean);
 c 
---
 t
(1 row)

SELECT * FROM cypher('expr',
$$RETURN {bool: true, int: 1} IN ['str', 1, 1.0, true, null, {bool: true, int: 1}, [1,3,5,[2,4,6]]]$$) AS r(c boolean);
 c 
---
 t
(1 row)

-- should return SQL null, nothing
SELECT * FROM cypher('expr',
$$RETURN null IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 
(1 row)

SELECT * FROM cypher('expr',
$$RETURN null IN ['str', 1, 1.0, true]$$) AS r(c boolean);
 c 
---
 
(1 row)

SELECT * FROM cypher('expr',
$$RETURN 'str' IN null $$) AS r(c boolean);
 c 
---
 
(1 row)

-- should all return false
SELECT * FROM cypher('expr',
$$RETURN 0 IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 f
(1 row)

SELECT * FROM cypher('expr',
$$RETURN 1.1 IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 f
(1 row)

SELECT * FROM cypher('expr',
$$RETURN 'Str' IN ['str', 1, 1.0, true, null]$$) AS r(c boolean);
 c 
---
 f
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [1,3,5,[2,4,5]] IN ['str', 1, 1.0, true, null, [1,3,5,[2,4,6]]]$$) AS r(c boolean);
 c 
---
 f
(1 row)

SELECT * FROM cypher('expr',
$$RETURN {bool: true, int: 2} IN ['str', 1, 1.0, true, null, {bool: true, int: 1}, [1,3,5,[2,4,6]]]$$) AS r(c boolean);
 c 
---
 f
(1 row)

-- should error - ERROR:  object of IN must be a list
SELECT * FROM cypher('expr',
$$RETURN null IN 'str' $$) AS r(c boolean);
ERROR:  object of IN must be a list
SELECT * FROM cypher('expr',
$$RETURN 'str' IN 'str' $$) AS r(c boolean);
ERROR:  object of IN must be a list
-- list access
SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][0]$$) AS r(c gtype);
 c 
---
 0
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][5]$$) AS r(c gtype);
 c 
---
 5
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][10]$$) AS r(c gtype);
 c  
----
 10
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-1]$$) AS r(c gtype);
 c  
----
 10
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-3]$$) AS r(c gtype);
 c 
---
 8
(1 row)

-- should return null
SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][11]$$) AS r(c gtype);
 c 
---
 
(1 row)

-- list slice
SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][0..]$$) AS r(c gtype);
                 c                  
------------------------------------
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][..11]$$) AS r(c gtype);
                 c                  
------------------------------------
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][0..0]$$) AS r(c gtype);
 c  
----
 []
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][10..10]$$) AS r(c gtype);
 c  
----
 []
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][0..1]$$) AS r(c gtype);
  c  
-----
 [0]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][9..10]$$) AS r(c gtype);
  c  
-----
 [9]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-1..]$$) AS r(c gtype);
  c   
------
 [10]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-1..11]$$) AS r(c gtype);
  c   
------
 [10]
(1 row)

SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-3..11]$$) AS r(c gtype);
     c      
------------
 [8, 9, 10]
(1 row)

-- this one should return null
SELECT * FROM cypher('expr',
$$RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10][-1..10]$$) AS r(c gtype);
 c  
----
 []
(1 row)

SELECT gtype_access_slice('[0]'::gtype, 'null'::gtype, '1'::gtype);
 gtype_access_slice 
--------------------
 [0]
(1 row)

SELECT gtype_access_slice('[0]'::gtype, '0'::gtype, 'null'::gtype);
 gtype_access_slice 
--------------------
 [0]
(1 row)

-- should error - ERROR:  slice must access a list
SELECT * from cypher('expr',
$$RETURN 0[0..1]$$) as r(a gtype);
ERROR:  slice must access a list
SELECT * from cypher('expr',
$$RETURN 0[[0]..[1]]$$) as r(a gtype);
ERROR:  slice must access a list
-- should return nothing
SELECT * from cypher('expr',
$$RETURN [0][0..-2147483649]$$) as r(a gtype);
 a  
----
 []
(1 row)

-- access and slice operators nested
SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[0] $$) as (results gtype);
 results 
---------
 0
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[2] $$) as (results gtype);
  results  
-----------
 [2, 3, 4]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-1] $$) as (results gtype);
 results 
---------
 9
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[2][-2] $$) as (results gtype);
 results 
---------
 3
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[2][-2..] $$) as (results gtype);
 results 
---------
 [3, 4]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..] $$) as (results gtype);
    results     
----------------
 [[6, 7, 8], 9]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-1..][-1..] $$) as (results gtype);
 results 
---------
 [9]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-1..][0] $$) as (results gtype);
 results 
---------
 9
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-1..][-1] $$) as (results gtype);
 results 
---------
 9
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-2..-1] $$) as (results gtype);
   results   
-------------
 [[6, 7, 8]]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-4..-2] $$) as (results gtype);
    results     
----------------
 [[2, 3, 4], 5]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-4..-2][-2] $$) as (results gtype);
  results  
-----------
 [2, 3, 4]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-4..-2][0] $$) as (results gtype);
  results  
-----------
 [2, 3, 4]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-4..-2][-2][-2..] $$) as (results gtype);
 results 
---------
 [3, 4]
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-4..-2][-2][-2..][0] $$) as (results gtype);
 results 
---------
 3
(1 row)

-- empty list
SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-1..][-2..-2] $$) as (results gtype);
 results 
---------
 []
(1 row)

-- should return null
SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[2][3] $$) as (results gtype);
 results 
---------
 
(1 row)

SELECT * from cypher('expr', $$ WITH [0, 1, [2, 3, 4], 5, [6, 7, 8], 9] as l RETURN l[-2..][-1..][-2] $$) as (results gtype);
 results 
---------
 
(1 row)

--
-- String operators
--
-- String LHS + String RHS
SELECT * FROM cypher('expr', $$RETURN 'str' + 'str'$$) AS r(c gtype);
    c     
----------
 "strstr"
(1 row)

-- String LHS + Integer RHS
SELECT * FROM cypher('expr', $$RETURN 'str' + 1$$) AS r(c gtype);
   c    
--------
 "str1"
(1 row)

-- String LHS + Float RHS
SELECT * FROM cypher('expr', $$RETURN 'str' + 1.0$$) AS r(c gtype);
    c     
----------
 "str1.0"
(1 row)

-- Integer LHS + String LHS
SELECT * FROM cypher('expr', $$RETURN 1 + 'str'$$) AS r(c gtype);
   c    
--------
 "1str"
(1 row)

-- Float LHS + String RHS
SELECT * FROM cypher('expr', $$RETURN 1.0 + 'str'$$) AS r(c gtype);
    c     
----------
 "1.0str"
(1 row)

--
-- Test transform logic for operators
--
SELECT * FROM cypher('expr', $$
RETURN (-(3 * 2 - 4.0) ^ ((10 / 5) + 1)) % -3
$$) AS r(result gtype);
 result 
--------
 -2.0
(1 row)

--
-- Test transform logic for comparison operators
--
SELECT * FROM cypher('expr', $$
RETURN 1 = 1.0
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 1 > -1.0
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN -1.0 < 1
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "aaa" < "z"
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "z" > "aaa"
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false = false
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ("string" < true)
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true < 1
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN (1 + 1.0) = (7 % 5)
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

--
-- Test chained comparisons
--
SELECT * FROM create_graph('chained');
NOTICE:  graph "chained" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('chained', $$ CREATE (:people {name: "Jason", age:50}) $$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('chained', $$ CREATE (:people {name: "Amy", age:25}) $$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('chained', $$ CREATE (:people {name: "Samantha", age:35}) $$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('chained', $$ CREATE (:people {name: "Mark", age:40}) $$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('chained', $$ CREATE (:people {name: "David", age:15}) $$) AS (result gtype);
 result 
--------
(0 rows)

-- should return 1
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 35 < u.age <= 49  RETURN u $$) AS (result vertex);
                                        result                                         
---------------------------------------------------------------------------------------
 {"id": 844424930131972, "label": "people", "properties": {"age": 40, "name": "Mark"}}
(1 row)

SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 25 <= u.age <= 25  RETURN u $$) AS (result vertex);
                                        result                                        
--------------------------------------------------------------------------------------
 {"id": 844424930131970, "label": "people", "properties": {"age": 25, "name": "Amy"}}
(1 row)

SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 35 = u.age = 35  RETURN u $$) AS (result vertex);
                                          result                                           
-------------------------------------------------------------------------------------------
 {"id": 844424930131971, "label": "people", "properties": {"age": 35, "name": "Samantha"}}
(1 row)

SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 50 > u.age > 35  RETURN u $$) AS (result vertex);
                                        result                                         
---------------------------------------------------------------------------------------
 {"id": 844424930131972, "label": "people", "properties": {"age": 40, "name": "Mark"}}
(1 row)

-- should return 3
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 40 <> u.age <> 35 RETURN u $$) AS (result vertex);
                                         result                                         
----------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "people", "properties": {"age": 50, "name": "Jason"}}
 {"id": 844424930131970, "label": "people", "properties": {"age": 25, "name": "Amy"}}
 {"id": 844424930131973, "label": "people", "properties": {"age": 15, "name": "David"}}
(3 rows)

-- should return 2
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 30 <= u.age <= 49 > u.age RETURN u $$) AS (result vertex);
                                          result                                           
-------------------------------------------------------------------------------------------
 {"id": 844424930131971, "label": "people", "properties": {"age": 35, "name": "Samantha"}}
 {"id": 844424930131972, "label": "people", "properties": {"age": 40, "name": "Mark"}}
(2 rows)

-- should return 0
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 30 <= u.age <= 49 = u.age RETURN u $$) AS (result vertex);
 result 
--------
(0 rows)

-- should return 2
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE 35 < u.age + 1 <= 50 RETURN u $$) AS (result vertex);
                                          result                                           
-------------------------------------------------------------------------------------------
 {"id": 844424930131971, "label": "people", "properties": {"age": 35, "name": "Samantha"}}
 {"id": 844424930131972, "label": "people", "properties": {"age": 40, "name": "Mark"}}
(2 rows)

-- should return 3
SELECT * FROM cypher('chained', $$ MATCH (u:people) WHERE NOT 35 < u.age + 1 <= 50 RETURN u $$) AS (result vertex);
                                         result                                         
----------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "people", "properties": {"age": 50, "name": "Jason"}}
 {"id": 844424930131970, "label": "people", "properties": {"age": 25, "name": "Amy"}}
 {"id": 844424930131973, "label": "people", "properties": {"age": 15, "name": "David"}}
(3 rows)

--
-- Test transform logic for IS NULL & IS NOT NULL
--
SELECT * FROM cypher('expr', $$
RETURN null IS NULL
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 1 IS NULL
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 1 IS NOT NULL
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN null IS NOT NULL
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

--
-- Test transform logic for AND, OR, NOT and XOR
--
SELECT * FROM cypher('expr', $$
RETURN NOT false
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN NOT true
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true AND true
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true AND false
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false AND true
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false AND false
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true OR true
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true OR false
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false OR true
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false OR false
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN NOT ((true OR false) AND (false OR true))
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true XOR true
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

SELECT * FROM cypher('expr', $$
RETURN true XOR false
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false XOR true
$$) AS r(result boolean);
 result 
--------
 t
(1 row)

SELECT * FROM cypher('expr', $$
RETURN false XOR false
$$) AS r(result boolean);
 result 
--------
 f
(1 row)

--
-- Test indirection transform logic for object.property, object["property"],
-- and array[element]
--
SELECT * FROM cypher('expr', $$
RETURN [
  1,
  {
    bool: true,
    int: 3,
    array: [
      9,
      11,
      {
        boom: false,
        float: 3.14
      },
      13
    ]
  },
  5,
  7,
  9
][1].array[2]["float"]
$$) AS r(result gtype);
 result 
--------
 3.14
(1 row)

--
-- Test STARTS WITH, ENDS WITH, and CONTAINS transform logic
--
SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" STARTS WITH "abcd"
$$) AS r(result gtype);
 result 
--------
 true
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" ENDS WITH "wxyz"
$$) AS r(result gtype);
 result 
--------
 true
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" CONTAINS "klmn"
$$) AS r(result gtype);
 result 
--------
 true
(1 row)

-- these should return false
SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" STARTS WITH "bcde"
$$) AS r(result gtype);
 result 
--------
 false
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" ENDS WITH "vwxy"
$$) AS r(result gtype);
 result 
--------
 false
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" CONTAINS "klmo"
$$) AS r(result gtype);
 result 
--------
 false
(1 row)

-- these should return SQL NULL
SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" STARTS WITH NULL
$$) AS r(result gtype);
 result 
--------
 
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" ENDS WITH NULL
$$) AS r(result gtype);
 result 
--------
 
(1 row)

SELECT * FROM cypher('expr', $$
RETURN "abcdefghijklmnopqrstuvwxyz" CONTAINS NULL
$$) AS r(result gtype);
 result 
--------
 
(1 row)

--
-- Test =~ aka regular expression comparisons
--
SELECT create_graph('regex');
NOTICE:  graph "regex" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('regex', $$
CREATE (n:Person {name: 'John'}) RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131969, "label": "Person", "properties": {"name": "John"}}
(1 row)

SELECT * FROM cypher('regex', $$
CREATE (n:Person {name: 'Jeff'}) RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131970, "label": "Person", "properties": {"name": "Jeff"}}
(1 row)

SELECT * FROM cypher('regex', $$
CREATE (n:Person {name: 'Joan'}) RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131971, "label": "Person", "properties": {"name": "Joan"}}
(1 row)

SELECT * FROM cypher('regex', $$
MATCH (n:Person) WHERE n.name =~ 'JoHn' RETURN n
$$) AS r(result vertex);
 result 
--------
(0 rows)

SELECT * FROM cypher('regex', $$
MATCH (n:Person) WHERE n.name =~ '(?i)JoHn' RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131969, "label": "Person", "properties": {"name": "John"}}
(1 row)

SELECT * FROM cypher('regex', $$
MATCH (n:Person) WHERE n.name =~ 'Jo.n' RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131969, "label": "Person", "properties": {"name": "John"}}
 {"id": 844424930131971, "label": "Person", "properties": {"name": "Joan"}}
(2 rows)

SELECT * FROM cypher('regex', $$
MATCH (n:Person) WHERE n.name =~ 'J.*' RETURN n
$$) AS r(result vertex);
                                   result                                   
----------------------------------------------------------------------------
 {"id": 844424930131969, "label": "Person", "properties": {"name": "John"}}
 {"id": 844424930131970, "label": "Person", "properties": {"name": "Jeff"}}
 {"id": 844424930131971, "label": "Person", "properties": {"name": "Joan"}}
(3 rows)

--
--Coearce to Postgres 3 int types (smallint, int, bigint)
--
SELECT create_graph('type_coercion');
NOTICE:  graph "type_coercion" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN NULL
$$) AS (i bigint);
 i 
---
  
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN 1
$$) AS (i smallint);
 i 
---
 1
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN 1
$$) AS (i int);
 i 
---
 1
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN 1
$$) AS (i bigint);
 i 
---
 1
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN 1.0
$$) AS (i bigint);
 i 
---
 1
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN 1.0::numeric
$$) AS (i bigint);
 i 
---
 1
(1 row)

SELECT * FROM cypher('type_coercion', $$
	RETURN '1'
$$) AS (i bigint);
 i 
---
 1
(1 row)

--Invalid String Format
SELECT * FROM cypher('type_coercion', $$
	RETURN '1.0'
$$) AS (i bigint);
ERROR:  invalid input syntax for type bigint: "1.0"
-- Casting to ints that will cause overflow
SELECT * FROM cypher('type_coercion', $$
	RETURN 10000000000000000000
$$) AS (i smallint);
ERROR:  smallint out of range
SELECT * FROM cypher('type_coercion', $$
	RETURN 10000000000000000000
$$) AS (i int);
ERROR:  integer out of range
--Invalid types
SELECT * FROM cypher('type_coercion', $$
	RETURN true
$$) AS (i bigint);
ERROR:  cannot cast gtype boolean to type int8
SELECT * FROM cypher('type_coercion', $$
	RETURN {key: 1}
$$) AS (i bigint);
ERROR:  cannot cast non-scalar gtype to int8
SELECT * FROM cypher('type_coercion', $$
	RETURN [1]
$$) AS (i bigint);
ERROR:  cannot cast non-scalar gtype to int8
SELECT * FROM cypher('type_coercion', $$CREATE ()-[:edge]->()$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('type_coercion', $$
	MATCH (v)
	RETURN v
$$) AS (i bigint);
ERROR:  cannot cast type vertex to bigint for column "i"
LINE 1: SELECT * FROM cypher('type_coercion', $$
                      ^
SELECT * FROM cypher('type_coercion', $$
	MATCH ()-[e]-()
	RETURN e
$$) AS (i bigint);
ERROR:  cannot cast type edge to bigint for column "i"
LINE 1: SELECT * FROM cypher('type_coercion', $$
                      ^
SELECT * FROM cypher('type_coercion', $$
	MATCH p=()-[]-()
	RETURN p
$$) AS (i bigint);
ERROR:  cannot cast type traversal to bigint for column "i"
LINE 1: SELECT * FROM cypher('type_coercion', $$
                      ^
--
-- Test typecasting '::' transform and execution logic
--
--
-- Test from an gtype value to gtype int
--
SELECT * FROM cypher('expr', $$
RETURN 0.0::int
$$) AS r(result gtype);
 result 
--------
 0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 0.0::integer
$$) AS r(result gtype);
 result 
--------
 0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '0'::int
$$) AS r(result gtype);
 result 
--------
 0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '0'::integer
$$) AS r(result gtype);
 result 
--------
 0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 0.0::numeric::int
$$) AS r(result gtype);
 result 
--------
 0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 2.71::int
$$) AS r(result gtype);
 result 
--------
 3
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 2.71::numeric::int
$$) AS r(result gtype);
 result 
--------
 3
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1.0, pie: 3.1415927, e: 2::numeric}, 2, null][1].one)::int
$$) AS r(result gtype);
 result 
--------
 1
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1.0::int, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].one)
$$) AS r(result gtype);
 result 
--------
 1
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1::float, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].one)::int
$$) AS r(result gtype);
 result 
--------
 1
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][3])::int
$$) AS r(result gtype);
 result 
--------
 
(1 row)

-- should return SQL null
SELECT * FROM cypher('expr', $$
RETURN null::int
$$) AS r(result gtype);
 result 
--------
 
(1 row)

-- should return JSON null
SELECT gtype_in('null::int');
 gtype_in 
----------
 null
(1 row)

-- these should fail
SELECT * FROM cypher('expr', $$
RETURN '0.0'::int
$$) AS r(result gtype);
ERROR:  invalid input syntax for type bigint: "0.0"
SELECT * FROM cypher('expr', $$
RETURN '1.5'::int
$$) AS r(result gtype);
ERROR:  invalid input syntax for type bigint: "1.5"
SELECT * FROM cypher('graph_name', $$
RETURN "15555555555555555555555555555"::int
$$) AS (string_result gtype);
ERROR:  graph "graph_name" does not exist
LINE 1: SELECT * FROM cypher('graph_name', $$
                             ^
SELECT * FROM cypher('expr', $$
RETURN 'NaN'::float::int
$$) AS r(result gtype);
ERROR:  bigint out of range
SELECT * FROM cypher('expr', $$
RETURN 'infinity'::float::int
$$) AS r(result gtype);
ERROR:  bigint out of range
-- Test from an gtype value to an gtype numeric
--
SELECT * FROM cypher('expr', $$
RETURN 0::numeric
$$) AS r(result gtype);
   result   
------------
 0::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 2.71::numeric
$$) AS r(result gtype);
    result     
---------------
 2.71::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '2.71'::numeric
$$) AS r(result gtype);
    result     
---------------
 2.71::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN (2.71::numeric)::numeric
$$) AS r(result gtype);
    result     
---------------
 2.71::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ('2.71'::numeric)::numeric
$$) AS r(result gtype);
    result     
---------------
 2.71::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ('NaN'::numeric)::numeric
$$) AS r(result gtype);
    result    
--------------
 NaN::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ((1 + 2.71) * 3)::numeric
$$) AS r(result gtype);
     result     
----------------
 11.13::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].pie)::numeric
$$) AS r(result gtype);
       result       
--------------------
 3.1415927::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].e)
$$) AS r(result gtype);
      result       
-------------------
 2.718281::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].e)::numeric
$$) AS r(result gtype);
      result       
-------------------
 2.718281::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][3])::numeric
$$) AS r(result gtype);
 result 
--------
 
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2::numeric, null])
$$) AS r(result gtype);
                                   result                                    
-----------------------------------------------------------------------------
 [0, {"e": 2.718281::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]
(1 row)

-- should return SQL null
SELECT tonumeric('null'::gtype);
 tonumeric 
-----------
 
(1 row)

SELECT tonumeric(null);
 tonumeric 
-----------
 
(1 row)

SELECT * FROM cypher('expr', $$
RETURN null::numeric
$$) AS r(result gtype);
 result 
--------
 
(1 row)

-- should return JSON null
SELECT gtype_in('null::numeric');
 gtype_in 
----------
 null
(1 row)

-- these should fail
SELECT * FROM cypher('expr', $$
RETURN ('2:71'::numeric)::numeric
$$) AS r(result gtype);
ERROR:  invalid input syntax for type numeric: "2:71"
SELECT * FROM cypher('expr', $$
RETURN ('inf'::numeric)::numeric
$$) AS r(result gtype);
      result       
-------------------
 Infinity::numeric
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ('infinity'::numeric)::numeric
$$) AS r(result gtype);
      result       
-------------------
 Infinity::numeric
(1 row)

-- verify that output can be accepted and reproduced correctly via gtype_in
SELECT gtype_in('2.71::numeric');
   gtype_in    
---------------
 2.71::numeric
(1 row)

SELECT gtype_in('[0, {"e": 2.718281::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]');
                                  gtype_in                                   
-----------------------------------------------------------------------------
 [0, {"e": 2.718281::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]
(1 row)

SELECT * FROM cypher('expr', $$
RETURN (['NaN'::numeric, {one: 1, pie: 3.1415927, nan: 'nAn'::numeric}, 2::numeric, null])
$$) AS r(result gtype);
                                       result                                        
-------------------------------------------------------------------------------------
 [NaN::numeric, {"nan": NaN::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]
(1 row)

SELECT gtype_in('[NaN::numeric, {"nan": NaN::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]');
                                      gtype_in                                       
-------------------------------------------------------------------------------------
 [NaN::numeric, {"nan": NaN::numeric, "one": 1, "pie": 3.1415927}, 2::numeric, null]
(1 row)

--
-- Test from an gtype value to gtype float
--
SELECT * FROM cypher('expr', $$
RETURN 0::float
$$) AS r(result gtype);
 result 
--------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '2.71'::float
$$) AS r(result gtype);
 result 
--------
 2.71
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 2.71::float
$$) AS r(result gtype);
 result 
--------
 2.71
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2::numeric}, 2, null][1].one)::float
$$) AS r(result gtype);
 result 
--------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1::float, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].one)
$$) AS r(result gtype);
 result 
--------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1::float, pie: 3.1415927, e: 2.718281::numeric}, 2, null][1].one)::float
$$) AS r(result gtype);
 result 
--------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1, pie: 3.1415927, e: 2.718281::numeric}, 2, null][3])::float
$$) AS r(result gtype);
 result 
--------
 
(1 row)

-- test NaN, infinity, and -infinity
SELECT * FROM cypher('expr', $$
RETURN 'NaN'::float
$$) AS r(result gtype);
 result 
--------
 NaN
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 'inf'::float
$$) AS r(result gtype);
  result  
----------
 Infinity
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '-inf'::float
$$) AS r(result gtype);
  result   
-----------
 -Infinity
(1 row)

SELECT * FROM cypher('expr', $$
RETURN 'infinity'::float
$$) AS r(result gtype);
  result  
----------
 Infinity
(1 row)

SELECT * FROM cypher('expr', $$
RETURN '-infinity'::float
$$) AS r(result gtype);
  result   
-----------
 -Infinity
(1 row)

-- should return SQL null
SELECT * FROM cypher('expr', $$
RETURN null::float
$$) AS r(result gtype);
 result 
--------
 
(1 row)

-- should return JSON null
SELECT gtype_in('null::float');
 gtype_in 
----------
 null
(1 row)

-- these should fail
SELECT * FROM cypher('expr', $$
RETURN '2:71'::float
$$) AS r(result gtype);
ERROR:  invalid input syntax for type double precision: "2:71"
SELECT * FROM cypher('expr', $$
RETURN 'infi'::float
$$) AS r(result gtype);
ERROR:  invalid input syntax for type double precision: "infi"
-- verify that output can be accepted and reproduced correctly via gtype_in
SELECT * FROM cypher('expr', $$
RETURN ([0, {one: 1::float, pie: 3.1415927, e: 2.718281::numeric}, 2::numeric, null])
$$) AS r(result gtype);
                                    result                                     
-------------------------------------------------------------------------------
 [0, {"e": 2.718281::numeric, "one": 1.0, "pie": 3.1415927}, 2::numeric, null]
(1 row)

SELECT gtype_in('[0, {"e": 2.718281::numeric, "one": 1.0, "pie": 3.1415927}, 2::numeric, null]');
                                   gtype_in                                    
-------------------------------------------------------------------------------
 [0, {"e": 2.718281::numeric, "one": 1.0, "pie": 3.1415927}, 2::numeric, null]
(1 row)

SELECT * FROM cypher('expr', $$
RETURN (['NaN'::float, {one: 'inf'::float, pie: 3.1415927, e: 2.718281::numeric}, 2::numeric, null])
$$) AS r(result gtype);
                                        result                                        
--------------------------------------------------------------------------------------
 [NaN, {"e": 2.718281::numeric, "one": Infinity, "pie": 3.1415927}, 2::numeric, null]
(1 row)

SELECT gtype_in('[NaN, {"e": 2.718281::numeric, "one": Infinity, "pie": 3.1415927}, 2::numeric, null]');
                                       gtype_in                                       
--------------------------------------------------------------------------------------
 [NaN, {"e": 2.718281::numeric, "one": Infinity, "pie": 3.1415927}, 2::numeric, null]
(1 row)

-- test functions
-- create some vertices and edges
-- XXX: Move after the CREATE regression tests...
SELECT * FROM cypher('expr', $$CREATE (:v)$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('expr', $$CREATE (:v {i: 0})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('expr', $$CREATE (:v {i: 1})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('expr', $$
    CREATE (:v1 {id:'initial'})-[:e1]->(:v1 {id:'middle'})-[:e1]->(:v1 {id:'end'})
$$) AS (a gtype);
 a 
---
(0 rows)

-- id()
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN id(e)
$$) AS (id gtype);
        id        
------------------
 1407374883553282
 1407374883553281
 1407374883553282
 1407374883553281
(4 rows)

SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN id(v)
$$) AS (id gtype);
        id        
------------------
 844424930131969
 844424930131970
 844424930131971
 1125899906842625
 1125899906842626
 1125899906842627
(6 rows)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN id(null)
$$) AS (id gtype);
ERROR:  function postgraph.id(gtype) does not exist
LINE 2:     RETURN id(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    RETURN id()
$$) AS (id gtype);
ERROR:  function postgraph.id() does not exist
LINE 2:     RETURN id()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- start_id()
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN start_id(e)
$$) AS (start_id gtype);
     start_id     
------------------
 1125899906842625
 1125899906842626
 1125899906842625
 1125899906842626
(4 rows)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN start_id(null)
$$) AS (start_id gtype);
ERROR:  function postgraph.start_id(gtype) does not exist
LINE 2:     RETURN start_id(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN start_id(v)
$$) AS (start_id gtype);
ERROR:  function postgraph.start_id(vertex) does not exist
LINE 2:     MATCH (v) RETURN start_id(v)
                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN start_id()
$$) AS (start_id gtype);
ERROR:  function postgraph.start_id() does not exist
LINE 2:     RETURN start_id()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- end_id()
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN end_id(e)
$$) AS (end_id edge);
ERROR:  cannot cast type gtype to edge for column "end_id"
LINE 1: SELECT * FROM cypher('expr', $$
                      ^
-- should return null
SELECT * FROM cypher('expr', $$
    RETURN end_id(null)
$$) AS (end_id edge);
ERROR:  function postgraph.end_id(gtype) does not exist
LINE 2:     RETURN end_id(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN end_id(v)
$$) AS (end_id vertex);
ERROR:  function postgraph.end_id(vertex) does not exist
LINE 2:     MATCH (v) RETURN end_id(v)
                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN end_id()
$$) AS (end_id edge);
ERROR:  function postgraph.end_id() does not exist
LINE 2:     RETURN end_id()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- startNode()
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN id(e), start_id(e), startNode(e)
$$) AS (id gtype, start_id gtype, startNode vertex);
        id        |     start_id     |                                startnode                                 
------------------+------------------+--------------------------------------------------------------------------
 1407374883553281 | 1125899906842626 | {"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}
 1407374883553281 | 1125899906842626 | {"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}
 1407374883553282 | 1125899906842625 | {"id": 1125899906842625, "label": "v1", "properties": {"id": "initial"}}
 1407374883553282 | 1125899906842625 | {"id": 1125899906842625, "label": "v1", "properties": {"id": "initial"}}
(4 rows)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN startNode(null)
$$) AS (startNode vertex);
ERROR:  function postgraph.startnode(gtype, gtype) does not exist
LINE 2:     RETURN startNode(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN startNode(v)
$$) AS (startNode vertex);
ERROR:  function postgraph.startnode(gtype, vertex) does not exist
LINE 2:     MATCH (v) RETURN startNode(v)
                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN startNode()
$$) AS (startNode vertex);
ERROR:  function postgraph.startnode() does not exist
LINE 2:     RETURN startNode()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- endNode()
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN id(e), end_id(e), endNode(e)
$$) AS (id gtype, end_id gtype, endNode vertex);
        id        |      end_id      |                                 endnode                                 
------------------+------------------+-------------------------------------------------------------------------
 1407374883553281 | 1125899906842627 | {"id": 1125899906842627, "label": "v1", "properties": {"id": "end"}}
 1407374883553281 | 1125899906842627 | {"id": 1125899906842627, "label": "v1", "properties": {"id": "end"}}
 1407374883553282 | 1125899906842626 | {"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}
 1407374883553282 | 1125899906842626 | {"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}
(4 rows)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN endNode(null)
$$) AS (endNode vertex);
ERROR:  function postgraph.endnode(gtype, gtype) does not exist
LINE 2:     RETURN endNode(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN endNode(v)
$$) AS (endNode vertex);
ERROR:  function postgraph.endnode(gtype, vertex) does not exist
LINE 2:     MATCH (v) RETURN endNode(v)
                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN endNode()
$$) AS (endNode vertex);
ERROR:  function postgraph.endnode() does not exist
LINE 2:     RETURN endNode()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- type() TODO: Move to other regression files
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN type(e)
$$) AS (type edge);
ERROR:  cannot cast type gtype to edge for column "type"
LINE 1: SELECT * FROM cypher('expr', $$
                      ^
-- should return null
SELECT * FROM cypher('expr', $$
    RETURN type(null)
$$) AS (type edge);
ERROR:  function postgraph.type(gtype) does not exist
LINE 2:     RETURN type(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN type(v)
$$) AS (type vertex);
ERROR:  cannot cast type gtype to vertex for column "type"
LINE 1: SELECT * FROM cypher('expr', $$
                      ^
SELECT * FROM cypher('expr', $$
    RETURN type()
$$) AS (type vertex);
ERROR:  function postgraph.type() does not exist
LINE 2:     RETURN type()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- label ()
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN label(v)
$$) AS (label vertex);
ERROR:  cannot cast type gtype to vertex for column "label"
LINE 1: SELECT * FROM cypher('expr', $$
                      ^
SELECT * FROM cypher('expr', $$
    MATCH ()-[e]->() RETURN label(e)
$$) AS (label edge);
ERROR:  cannot cast type gtype to edge for column "label"
LINE 1: SELECT * FROM cypher('expr', $$
                      ^
-- return NULL
SELECT * FROM cypher('expr', $$
    RETURN label(NULL)
$$) AS (label edge);
ERROR:  function postgraph.label(gtype) does not exist
LINE 2:     RETURN label(NULL)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT postgraph.label(NULL);
ERROR:  function postgraph.label(unknown) is not unique
LINE 1: SELECT postgraph.label(NULL);
               ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
-- should error
SELECT * FROM cypher('expr', $$
    MATCH p=()-[]->() RETURN label(p)
$$) AS (label gtype);
ERROR:  function postgraph.label(traversal) does not exist
LINE 2:     MATCH p=()-[]->() RETURN label(p)
                                     ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN label(1)
$$) AS (label gtype);
ERROR:  function postgraph.label(gtype) does not exist
LINE 2:     RETURN label(1)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    MATCH (n) RETURN label([n])
$$) AS (label gtype);
ERROR:  function postgraph.label(gtype) does not exist
LINE 2:     MATCH (n) RETURN label([n])
                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN label({id: 0, label: 'failed', properties: {}})
$$) AS (label gtype);
ERROR:  function postgraph.label(gtype) does not exist
LINE 2:     RETURN label({id: 0, label: 'failed', properties: {}})
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- size() of a string
SELECT * FROM cypher('expr', $$
    RETURN size('12345')
$$) AS (size gtype);
 size 
------
 5
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN size("1234567890")
$$) AS (size gtype);
 size 
------
 10
(1 row)

-- size() of an array
SELECT * FROM cypher('expr', $$
    RETURN size([1, 2, 3, 4, 5])
$$) AS (size gtype);
 size 
------
 5
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN size([])
$$) AS (size gtype);
 size 
------
 0
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN size(null)
$$) AS (size gtype);
 size 
------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN size(1234567890)
$$) AS (size gtype);
ERROR:  size() unsupported argument
SELECT * FROM cypher('expr', $$
    RETURN size()
$$) AS (size gtype);
ERROR:  function postgraph.size() does not exist
LINE 2:     RETURN size()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- head() of an array
SELECT * FROM cypher('expr', $$
    RETURN head([1, 2, 3, 4, 5])
$$) AS (head gtype);
 head 
------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN head([1])
$$) AS (head gtype);
 head 
------
 1
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN head([])
$$) AS (head gtype);
 head 
------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN head(null)
$$) AS (head gtype);
 head 
------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN head(1234567890)
$$) AS (head gtype);
ERROR:  head() argument must resolve to a list
SELECT * FROM cypher('expr', $$
    RETURN head()
$$) AS (head gtype);
ERROR:  function postgraph.head() does not exist
LINE 2:     RETURN head()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- last()
SELECT * FROM cypher('expr', $$
    RETURN last([1, 2, 3, 4, 5])
$$) AS (last gtype);
 last 
------
 5
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN last([1])
$$) AS (last gtype);
 last 
------
 1
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN last([])
$$) AS (last gtype);
 last 
------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN last(null)
$$) AS (last gtype);
 last 
------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN last(1234567890)
$$) AS (last gtype);
ERROR:  last() argument must resolve to a list or null
SELECT * FROM cypher('expr', $$
    RETURN last()
$$) AS (last gtype);
ERROR:  function postgraph.last() does not exist
LINE 2:     RETURN last()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- properties()
SELECT * FROM cypher('expr', $$
    MATCH (v) RETURN properties(v)
$$) AS (properties gtype);
    properties     
-------------------
 {}
 {"i": 0}
 {"i": 1}
 {"id": "initial"}
 {"id": "middle"}
 {"id": "end"}
(6 rows)

SELECT * FROM cypher('expr', $$
    MATCH ()-[e]-() RETURN properties(e)
$$) AS (properties gtype);
 properties 
------------
 {}
 {}
 {}
 {}
(4 rows)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN properties(null)
$$) AS (properties gtype);
ERROR:  function postgraph.properties(gtype) does not exist
LINE 2:     RETURN properties(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should fail
SELECT * FROM cypher('expr', $$
    RETURN properties(1234)
$$) AS (properties gtype);
ERROR:  function postgraph.properties(gtype) does not exist
LINE 2:     RETURN properties(1234)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN properties()
$$) AS (properties gtype);
ERROR:  function postgraph.properties() does not exist
LINE 2:     RETURN properties()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- coalesce
SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, 1, null, null)
$$) AS (coalesce gtype);
 coalesce 
----------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, -3.14, null, null)
$$) AS (coalesce gtype);
 coalesce 
----------
 -3.14
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, "string", null, null)
$$) AS (coalesce gtype);
 coalesce 
----------
 "string"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, null, null, [])
$$) AS (coalesce gtype);
 coalesce 
----------
 []
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, null, null, {})
$$) AS (coalesce gtype);
 coalesce 
----------
 {}
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN coalesce(null, id(null), null)
$$) AS (coalesce gtype);
ERROR:  function postgraph.id(gtype) does not exist
LINE 2:     RETURN coalesce(null, id(null), null)
                                  ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN coalesce(null)
$$) AS (coalesce gtype);
 coalesce 
----------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN coalesce()
$$) AS (coalesce gtype);
ERROR:  syntax error at or near ")"
LINE 2:     RETURN coalesce()
                            ^
-- toBoolean()
SELECT * FROM cypher('expr', $$
    RETURN toBoolean(true)
$$) AS (toBoolean gtype);
 toboolean 
-----------
 true
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toBoolean(false)
$$) AS (toBoolean gtype);
 toboolean 
-----------
 false
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toBoolean("true")
$$) AS (toBoolean gtype);
 toboolean 
-----------
 true
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toBoolean("false")
$$) AS (toBoolean gtype);
 toboolean 
-----------
 false
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN toBoolean("falze")
$$) AS (toBoolean gtype);
 toboolean 
-----------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toBoolean(null)
$$) AS (toBoolean gtype);
 toboolean 
-----------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN toBoolean(1)
$$) AS (toBoolean gtype);
ERROR:  toBoolean() unsupported argument gtype 3
SELECT * FROM cypher('expr', $$
    RETURN toBoolean()
$$) AS (toBoolean gtype);
ERROR:  function postgraph.toboolean() does not exist
LINE 2:     RETURN toBoolean()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- toFloat()
SELECT * FROM cypher('expr', $$
    RETURN toFloat(1)
$$) AS (toFloat gtype);
 tofloat 
---------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toFloat(1.2)
$$) AS (toFloat gtype);
 tofloat 
---------
 1.2
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toFloat("1")
$$) AS (toFloat gtype);
 tofloat 
---------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toFloat("1.2")
$$) AS (toFloat gtype);
 tofloat 
---------
 1.2
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toFloat("1.2"::numeric)
$$) AS (toFloat gtype);
 tofloat 
---------
 1.2
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN toFloat("falze")
$$) AS (toFloat gtype);
ERROR:  invalid input syntax for type double precision: "falze"
SELECT * FROM cypher('expr', $$
    RETURN toFloat(null)
$$) AS (toFloat gtype);
 tofloat 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN toFloat(true)
$$) AS (toFloat gtype);
ERROR:  cannot cast gtype boolean to type float8
SELECT * FROM cypher('expr', $$
    RETURN toFloat()
$$) AS (toFloat gtype);
ERROR:  function postgraph.tofloat() does not exist
LINE 2:     RETURN toFloat()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- toInteger()
SELECT * FROM cypher('expr', $$
    RETURN toInteger(1)
$$) AS (toInteger gtype);
 tointeger 
-----------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toInteger(1.2)
$$) AS (toInteger gtype);
 tointeger 
-----------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toInteger("1")
$$) AS (toInteger gtype);
 tointeger 
-----------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toInteger("1.2")
$$) AS (toInteger gtype);
ERROR:  invalid input syntax for type bigint: "1.2"
SELECT * FROM cypher('expr', $$
    RETURN toInteger("1.2"::numeric)
$$) AS (toInteger gtype);
 tointeger 
-----------
 1
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN toInteger("falze")
$$) AS (toInteger gtype);
ERROR:  invalid input syntax for type bigint: "falze"
SELECT * FROM cypher('expr', $$
    RETURN toInteger(null)
$$) AS (toInteger gtype);
 tointeger 
-----------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN toInteger(true)
$$) AS (toInteger gtype);
ERROR:  cannot cast gtype boolean to type int8
SELECT * FROM cypher('expr', $$
    RETURN toInteger()
$$) AS (toInteger gtype);
ERROR:  function postgraph.tointeger() does not exist
LINE 2:     RETURN toInteger()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- toString()
--
SELECT * FROM toString(gtype_in('3'));
 tostring 
----------
 "3"
(1 row)

SELECT * FROM toString(gtype_in('3.14'));
 tostring 
----------
 "3.14"
(1 row)

SELECT * FROM toString(gtype_in('3.14::float'));
 tostring 
----------
 "3.14"
(1 row)

SELECT * FROM toString(gtype_in('3.14::numeric'));
 tostring 
----------
 "3.14"
(1 row)

SELECT * FROM toString(gtype_in('true'));
 tostring 
----------
 "true"
(1 row)

SELECT * FROM toString(gtype_in('false'));
 tostring 
----------
 "false"
(1 row)

SELECT * FROM toString(gtype_in('"a string"'));
  tostring  
------------
 "a string"
(1 row)

SELECT * FROM cypher('expr', $$ RETURN toString(3.14::numeric) $$) AS (results gtype);
 results 
---------
 "3.14"
(1 row)

-- should return null
SELECT * FROM toString(NULL);
 tostring 
----------
 
(1 row)

SELECT * FROM toString(gtype_in(null));
 tostring 
----------
 
(1 row)

-- should fail
SELECT * FROM toString();
ERROR:  function tostring() does not exist
LINE 1: SELECT * FROM toString();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$ RETURN toString() $$) AS (results gtype);
ERROR:  function postgraph.tostring() does not exist
LINE 1: SELECT * FROM cypher('expr', $$ RETURN toString() $$) AS (re...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- reverse(string)
--
SELECT * FROM cypher('expr', $$
    RETURN reverse("gnirts a si siht")
$$) AS (results gtype);
      results       
--------------------
 "this is a string"
(1 row)

SELECT * FROM reverse('"gnirts a si siht"'::gtype);
      reverse       
--------------------
 "this is a string"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN reverse(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM reverse(null);
 reverse 
---------
 
(1 row)

-- should return error
SELECT * FROM reverse([4923, 'abc', 521, NULL, 487]);
ERROR:  syntax error at or near "["
LINE 1: SELECT * FROM reverse([4923, 'abc', 521, NULL, 487]);
                              ^
-- Should return the reversed list
SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 'abc', 521, NULL, 487])
$$) AS (u gtype);
               u               
-------------------------------
 [487, null, 521, "abc", 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923])
$$) AS (u gtype);
   u    
--------
 [4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 257])
$$) as (u gtype);
      u      
-------------
 [257, 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 257, null])
$$) as (u gtype);
         u         
-------------------
 [null, 257, 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 257, 'tea'])
$$) as (u gtype);
         u          
--------------------
 ["tea", 257, 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([[1, 4, 7], 4923, [1, 2, 3], 'abc', 521, NULL, 487, ['fgt', 7, 10]])
$$) as (u gtype);
                                  u                                  
---------------------------------------------------------------------
 [["fgt", 7, 10], 487, null, 521, "abc", [1, 2, 3], 4923, [1, 4, 7]]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 257, {test1: "key"}])
$$) as (u gtype);
               u               
-------------------------------
 [{"test1": "key"}, 257, 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN reverse([4923, 257, {test2: [1, 2, 3]}])
$$) as (u gtype);
                 u                 
-----------------------------------
 [{"test2": [1, 2, 3]}, 257, 4923]
(1 row)

SELECT * FROM cypher('expr', $$
    CREATE ({test: [1, 2, 3]})
$$) as (u gtype);
 u 
---
(0 rows)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN reverse(true)
$$) AS (results gtype);
ERROR:  reverse() unsupported argument gtype 5
SELECT * FROM reverse(true);
ERROR:  function reverse(boolean) does not exist
LINE 1: SELECT * FROM reverse(true);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN reverse(3.14)
$$) AS (results gtype);
ERROR:  reverse() unsupported argument gtype 4
SELECT * FROM reverse(3.14);
ERROR:  function reverse(numeric) does not exist
LINE 1: SELECT * FROM reverse(3.14);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN reverse()
$$) AS (results gtype);
ERROR:  function postgraph.reverse() does not exist
LINE 2:     RETURN reverse()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM reverse();
ERROR:  function reverse() does not exist
LINE 1: SELECT * FROM reverse();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- toUpper() and toLower()
--
SELECT * FROM cypher('expr', $$
    RETURN toUpper('to uppercase')
$$) AS (toUpper gtype);
    toupper     
----------------
 "TO UPPERCASE"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toUpper('')
$$) AS (toUpper gtype);
 toupper 
---------
 ""
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toLower('TO LOWERCASE')
$$) AS (toLower gtype);
    tolower     
----------------
 "to lowercase"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN toUpper(null)
$$) AS (toUpper gtype);
 toupper 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN toLower(null)
$$) AS (toLower gtype);
 tolower 
---------
 
(1 row)

SELECT * FROM toupper(null);
 toupper 
---------
 
(1 row)

SELECT * FROM tolower(null);
 tolower 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN toUpper(true)
$$) AS (toUpper gtype);
ERROR:  toUpper() unsupported argument gtype 5
SELECT * FROM cypher('expr', $$
    RETURN toUpper()
$$) AS (toUpper gtype);
ERROR:  function postgraph.toupper() does not exist
LINE 2:     RETURN toUpper()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN toLower(true)
$$) AS (toLower gtype);
ERROR:  toLower() unsupported argument gtype 5
SELECT * FROM cypher('expr', $$
    RETURN toLower()
$$) AS (toLower gtype);
ERROR:  function postgraph.tolower() does not exist
LINE 2:     RETURN toLower()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM toupper();
ERROR:  function toupper() does not exist
LINE 1: SELECT * FROM toupper();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM tolower();
ERROR:  function tolower() does not exist
LINE 1: SELECT * FROM tolower();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- lTrim(), rTrim(), trim()
--
SELECT * FROM cypher('expr', $$
    RETURN lTrim("  string   ")
$$) AS (results gtype);
   results   
-------------
 "string   "
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN rTrim("  string   ")
$$) AS (results gtype);
  results   
------------
 "  string"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN trim("  string   ")
$$) AS (results gtype);
 results  
----------
 "string"
(1 row)

SELECT * FROM ltrim('"  string   "'::gtype);
    ltrim    
-------------
 "string   "
(1 row)

SELECT * FROM rtrim('"  string   "'::gtype);
   rtrim    
------------
 "  string"
(1 row)

SELECT * FROM trim('"  string   "'::gtype);
ERROR:  function pg_catalog.btrim(gtype) does not exist
LINE 1: SELECT * FROM trim('"  string   "'::gtype);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should return null
SELECT * FROM cypher('expr', $$
    RETURN lTrim(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN rTrim(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN trim(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM ltrim(null);
 ltrim 
-------
 
(1 row)

SELECT * FROM rtrim(null);
 rtrim 
-------
 
(1 row)

SELECT * FROM trim(null);
 btrim 
-------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN lTrim(true)
$$) AS (results gtype);
ERROR:  lTrim() unsupported argument gtype 5
SELECT * FROM cypher('expr', $$
    RETURN rTrim(true)
$$) AS (results gtype);
ERROR:  rTrim() unsupported argument gtype 5
SELECT * FROM cypher('expr', $$
    RETURN trim(true)
$$) AS (results gtype);
ERROR:  Trim() unsupported argument gtype 5
SELECT * FROM cypher('expr', $$
    RETURN lTrim()
$$) AS (results gtype);
ERROR:  function postgraph.ltrim() does not exist
LINE 2:     RETURN lTrim()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN rTrim()
$$) AS (results gtype);
ERROR:  function postgraph.rtrim() does not exist
LINE 2:     RETURN rTrim()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN trim()
$$) AS (results gtype);
ERROR:  function postgraph.trim() does not exist
LINE 2:     RETURN trim()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM ltrim();
ERROR:  function ltrim() does not exist
LINE 1: SELECT * FROM ltrim();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM rtrim();
ERROR:  function rtrim() does not exist
LINE 1: SELECT * FROM rtrim();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM trim();
ERROR:  syntax error at or near ")"
LINE 1: SELECT * FROM trim();
                           ^
--
-- left(), right(), & substring()
-- left()
SELECT * FROM cypher('expr', $$
    RETURN left("123456789", 1)
$$) AS (results gtype);
 results 
---------
 "1"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN left("123456789", 3)
$$) AS (results gtype);
 results 
---------
 "123"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN left("123456789", 0)
$$) AS (results gtype);
 results 
---------
 ""
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN left(null, 1)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN left(null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM left(null, '1'::gtype);
 left 
------
 
(1 row)

SELECT * FROM left(null, null);
ERROR:  function left(unknown, unknown) is not unique
LINE 1: SELECT * FROM left(null, null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
-- should fail
SELECT * FROM cypher('expr', $$
    RETURN left("123456789", null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN left("123456789", -1)
$$) AS (results gtype);
  results   
------------
 "12345678"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN left()
$$) AS (results gtype);
ERROR:  function postgraph.left() does not exist
LINE 2:     RETURN left()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM left('123456789', null);
ERROR:  function left(unknown, unknown) is not unique
LINE 1: SELECT * FROM left('123456789', null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM left('"123456789"'::gtype, '-1'::gtype);
    left    
------------
 "12345678"
(1 row)

SELECT * FROM left();
ERROR:  function left() does not exist
LINE 1: SELECT * FROM left();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--right()
SELECT * FROM cypher('expr', $$
    RETURN right("123456789", 1)
$$) AS (results gtype);
 results 
---------
 "9"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN right("123456789", 3)
$$) AS (results gtype);
 results 
---------
 "789"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN right("123456789", 0)
$$) AS (results gtype);
 results 
---------
 ""
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN right(null, 1)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN right(null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM right(null, '1'::gtype);
 right 
-------
 
(1 row)

SELECT * FROM right(null, null);
ERROR:  function right(unknown, unknown) is not unique
LINE 1: SELECT * FROM right(null, null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
-- should fail
SELECT * FROM cypher('expr', $$
    RETURN right("123456789", null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN right("123456789", -1)
$$) AS (results gtype);
  results   
------------
 "23456789"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN right()
$$) AS (results gtype);
ERROR:  function postgraph.right() does not exist
LINE 2:     RETURN right()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM right('123456789', null);
ERROR:  function right(unknown, unknown) is not unique
LINE 1: SELECT * FROM right('123456789', null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM right('"123456789"'::gtype, '-1'::gtype);
   right    
------------
 "23456789"
(1 row)

SELECT * FROM right();
ERROR:  function right() does not exist
LINE 1: SELECT * FROM right();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- substring()
SELECT * FROM cypher('expr', $$
    RETURN substring("0123456789", 0, 1)
$$) AS (results gtype);
 results 
---------
 "0"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN substring("0123456789", 1, 3)
$$) AS (results gtype);
 results 
---------
 "123"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN substring("0123456789", 3)
$$) AS (results gtype);
  results  
-----------
 "3456789"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN substring("0123456789", 0)
$$) AS (results gtype);
   results    
--------------
 "0123456789"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN substring(null, null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN substring(null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN substring(null, 1)
$$) AS (results gtype);
 results 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN substring("123456789", null)
$$) AS (results gtype);
ERROR:  substring() offset or length cannot be null
SELECT * FROM cypher('expr', $$
    RETURN substring("123456789", 0, -1)
$$) AS (results gtype);
ERROR:  substring() negative values are not supported for offset or length
SELECT * FROM cypher('expr', $$
    RETURN substring("123456789", -1)
$$) AS (results gtype);
ERROR:  substring() negative values are not supported for offset or length
SELECT * FROM cypher('expr', $$
    RETURN substring("123456789")
$$) AS (results gtype);
ERROR:  function postgraph.substring(gtype) does not exist
LINE 2:     RETURN substring("123456789")
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- split()
--
SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", ",")
$$) AS (results gtype);
            results             
--------------------------------
 ["a", "b", "c", "d", "e", "f"]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", "")
$$) AS (results gtype);
                         results                         
---------------------------------------------------------
 ["a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", " ")
$$) AS (results gtype);
     results     
-----------------
 ["a,b,c,d,e,f"]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,cd  e,f", " ")
$$) AS (results gtype);
        results        
-----------------------
 ["a,b,cd", "", "e,f"]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,cd  e,f", "  ")
$$) AS (results gtype);
      results      
-------------------
 ["a,b,cd", "e,f"]
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", "c,")
$$) AS (results gtype);
      results      
-------------------
 ["a,b,", "d,e,f"]
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN split(null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN split(null, ",")
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM split(null, null);
 split 
-------
 
(1 row)

SELECT * FROM split('"a,b,c,d,e,f"'::gtype, null);
 split 
-------
 
(1 row)

SELECT * FROM split(null, '","'::gtype);
 split 
-------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN split(123456789, ",")
$$) AS (results gtype);
ERROR:  split() unsupported argument gtype 3
SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f", -1)
$$) AS (results gtype);
ERROR:  split() unsupported argument gtype 3
SELECT * FROM cypher('expr', $$
    RETURN split("a,b,c,d,e,f")
$$) AS (results gtype);
ERROR:  function postgraph.split(gtype) does not exist
LINE 2:     RETURN split("a,b,c,d,e,f")
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN split()
$$) AS (results gtype);
ERROR:  function postgraph.split() does not exist
LINE 2:     RETURN split()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM split('123456789'::gtype, '","'::gtype);
ERROR:  split() unsupported argument gtype 3
SELECT * FROM split('"a,b,c,d,e,f"'::gtype, '-1'::gtype);
ERROR:  split() unsupported argument gtype 3
SELECT * FROM split('"a,b,c,d,e,f"'::gtype);
ERROR:  function split(gtype) does not exist
LINE 1: SELECT * FROM split('"a,b,c,d,e,f"'::gtype);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM split();
ERROR:  function split() does not exist
LINE 1: SELECT * FROM split();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- replace()
--
SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", "lo", "p")
$$) AS (results gtype);
 results 
---------
 "Help"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", "hello", "Good bye")
$$) AS (results gtype);
 results 
---------
 "Hello"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("abcabcabc", "abc", "a")
$$) AS (results gtype);
 results 
---------
 "aaa"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("abcabcabc", "ab", "")
$$) AS (results gtype);
 results 
---------
 "ccc"
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("ababab", "ab", "ab")
$$) AS (results gtype);
 results  
----------
 "ababab"
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN replace(null, null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", "", null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("", "", "")
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", "Hello", "")
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN replace("", "Hello", "Mellow")
$$) AS (results gtype);
 results 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN replace()
$$) AS (results gtype);
ERROR:  function postgraph.replace() does not exist
LINE 2:     RETURN replace()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN replace("Hello")
$$) AS (results gtype);
ERROR:  function postgraph.replace(gtype) does not exist
LINE 2:     RETURN replace("Hello")
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", null)
$$) AS (results gtype);
ERROR:  function postgraph.replace(gtype, gtype) does not exist
LINE 2:     RETURN replace("Hello", null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", "e", 1)
$$) AS (results gtype);
ERROR:  replace() unsupported argument gtype 3
SELECT * FROM cypher('expr', $$
    RETURN replace("Hello", 1, "e")
$$) AS (results gtype);
ERROR:  replace() unsupported argument gtype 3
--
-- sin, cos, tan, cot
--
SELECT sin::gtype = results FROM cypher('expr', $$
    RETURN sin(3.1415)
$$) AS (results gtype), sin(3.1415);
 ?column? 
----------
 t
(1 row)

SELECT cos::gtype = results FROM cypher('expr', $$
    RETURN cos(3.1415)
$$) AS (results gtype), cos(3.1415);
 ?column? 
----------
 t
(1 row)

SELECT tan::gtype = results FROM cypher('expr', $$
    RETURN tan(3.1415)
$$) AS (results gtype), tan(3.1415);
 ?column? 
----------
 t
(1 row)

SELECT cot::gtype = results FROM cypher('expr', $$
    RETURN cot(3.1415)
$$) AS (results gtype), cot(3.1415);
 ?column? 
----------
 t
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN sin(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN cos(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN tan(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN cot(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM sin(null);
ERROR:  function sin(unknown) is not unique
LINE 1: SELECT * FROM sin(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM cos(null);
ERROR:  function cos(unknown) is not unique
LINE 1: SELECT * FROM cos(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM tan(null);
ERROR:  function tan(unknown) is not unique
LINE 1: SELECT * FROM tan(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM cot(null);
ERROR:  function cot(unknown) is not unique
LINE 1: SELECT * FROM cot(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
-- should fail
SELECT * FROM cypher('expr', $$
    RETURN sin("0")
$$) AS (results gtype);
ERROR:  sin() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN cos("0")
$$) AS (results gtype);
ERROR:  cos() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN tan("0")
$$) AS (results gtype);
ERROR:  tan() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN cot("0")
$$) AS (results gtype);
ERROR:  cot() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN sin()
$$) AS (results gtype);
ERROR:  function postgraph.sin() does not exist
LINE 2:     RETURN sin()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN cos()
$$) AS (results gtype);
ERROR:  function postgraph.cos() does not exist
LINE 2:     RETURN cos()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN tan()
$$) AS (results gtype);
ERROR:  function postgraph.tan() does not exist
LINE 2:     RETURN tan()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN cot()
$$) AS (results gtype);
ERROR:  function postgraph.cot() does not exist
LINE 2:     RETURN cot()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM sin('0'::gtype);
 sin 
-----
 0.0
(1 row)

SELECT * FROM cos('0'::gtype);
 cos 
-----
 1.0
(1 row)

SELECT * FROM tan('0'::gtype);
 tan 
-----
 0.0
(1 row)

SELECT * FROM cot('0'::gtype);
   cot    
----------
 Infinity
(1 row)

SELECT * FROM sin();
ERROR:  function sin() does not exist
LINE 1: SELECT * FROM sin();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cos();
ERROR:  function cos() does not exist
LINE 1: SELECT * FROM cos();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM tan();
ERROR:  function tan() does not exist
LINE 1: SELECT * FROM tan();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cot();
ERROR:  function cot() does not exist
LINE 1: SELECT * FROM cot();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- Arc functions: asin, acos, atan, & atan2
--
SELECT * FROM cypher('expr', $$
    RETURN asin(1)*2
$$) AS (results gtype);
     results      
------------------
 3.14159265358979
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN acos(0)*2
$$) AS (results gtype);
     results      
------------------
 3.14159265358979
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan(1)*4
$$) AS (results gtype);
     results      
------------------
 3.14159265358979
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan2(1, 1)*4
$$) AS (results gtype);
     results      
------------------
 3.14159265358979
(1 row)

SELECT * FROM asin(1), asin('1'::gtype);
ERROR:  table name "asin" specified more than once
SELECT * FROM acos(0), acos('0'::gtype);
ERROR:  table name "acos" specified more than once
SELECT * FROM atan(1), atan('1'::gtype);
ERROR:  table name "atan" specified more than once
SELECT * FROM atan2(1, 1), atan2('1'::gtype, '1'::gtype);
ERROR:  table name "atan2" specified more than once
-- should return null
SELECT * FROM cypher('expr', $$
    RETURN asin(1.1)
$$) AS (results gtype);
ERROR:  input is out of range
SELECT * FROM cypher('expr', $$
    RETURN acos(1.1)
$$) AS (results gtype);
ERROR:  input is out of range
SELECT * FROM cypher('expr', $$
    RETURN asin(-1.1)
$$) AS (results gtype);
ERROR:  input is out of range
SELECT * FROM cypher('expr', $$
    RETURN acos(-1.1)
$$) AS (results gtype);
ERROR:  input is out of range
SELECT * FROM cypher('expr', $$
    RETURN asin(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN acos(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan2(null, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan2(null, 1)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN atan2(1, null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM asin(null);
ERROR:  function asin(unknown) is not unique
LINE 1: SELECT * FROM asin(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM acos(null);
ERROR:  function acos(unknown) is not unique
LINE 1: SELECT * FROM acos(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM atan(null);
ERROR:  function atan(unknown) is not unique
LINE 1: SELECT * FROM atan(null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM atan2(null, null);
ERROR:  function atan2(unknown, unknown) is not unique
LINE 1: SELECT * FROM atan2(null, null);
                      ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT * FROM atan2('1'::gtype, null);
 atan2 
-------
 
(1 row)

SELECT * FROM atan2(null, '1'::gtype);
 atan2 
-------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN asin("0")
$$) AS (results gtype);
ERROR:  asin() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN acos("0")
$$) AS (results gtype);
ERROR:  acos() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN atan("0")
$$) AS (results gtype);
ERROR:  atan() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN atan2("0", 1)
$$) AS (results gtype);
ERROR:  atan2() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN atan2(0, "1")
$$) AS (results gtype);
ERROR:  atan2() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN asin()
$$) AS (results gtype);
ERROR:  function postgraph.asin() does not exist
LINE 2:     RETURN asin()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN acos()
$$) AS (results gtype);
ERROR:  function postgraph.acos() does not exist
LINE 2:     RETURN acos()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN atan()
$$) AS (results gtype);
ERROR:  function postgraph.atan() does not exist
LINE 2:     RETURN atan()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN atan2()
$$) AS (results gtype);
ERROR:  function postgraph.atan2() does not exist
LINE 2:     RETURN atan2()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN atan2(null)
$$) AS (results gtype);
ERROR:  function postgraph.atan2(gtype) does not exist
LINE 2:     RETURN atan2(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM asin('0'::gtype);
 asin 
------
 0.0
(1 row)

SELECT * FROM acos('0'::gtype);
      acos       
-----------------
 1.5707963267949
(1 row)

SELECT * FROM atan('0'::gtype);
 atan 
------
 0.0
(1 row)

SELECT * FROM atan2('"0"'::gtype, '1'::gtype);
ERROR:  atan2() unsupported argument gtype 1
SELECT * FROM atan2('1'::gtype, '"0"'::gtype);
ERROR:  atan2() unsupported argument gtype 1
SELECT * FROM asin();
ERROR:  function asin() does not exist
LINE 1: SELECT * FROM asin();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM acos();
ERROR:  function acos() does not exist
LINE 1: SELECT * FROM acos();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM atan();
ERROR:  function atan() does not exist
LINE 1: SELECT * FROM atan();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM atan2();
ERROR:  function atan2() does not exist
LINE 1: SELECT * FROM atan2();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM atan2('1'::gtype);
ERROR:  function atan2(gtype) does not exist
LINE 1: SELECT * FROM atan2('1'::gtype);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- pi
--
SELECT * FROM cypher('expr', $$
    RETURN pi()
$$) AS (results gtype);
     results      
------------------
 3.14159265358979
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sin(pi())
$$) AS (results gtype);
       results        
----------------------
 1.22464679914735e-16
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sin(pi()/4)
$$) AS (results gtype);
      results      
-------------------
 0.707106781186547
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN cos(pi())
$$) AS (results gtype);
 results 
---------
 -1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN cos(pi()/2)
$$) AS (results gtype);
       results        
----------------------
 6.12323399573677e-17
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sin(pi()/2)
$$) AS (results gtype);
 results 
---------
 1.0
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN pi(null)
$$) AS (results gtype);
ERROR:  function postgraph.pi(gtype) does not exist
LINE 2:     RETURN pi(null)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN pi(1)
$$) AS (results gtype);
ERROR:  function postgraph.pi(gtype) does not exist
LINE 2:     RETURN pi(1)
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- radians() & degrees()
--
SELECT * FROM cypher('expr', $$
    RETURN radians(0)
$$) AS (results gtype);
 results 
---------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN degrees(0)
$$) AS (results gtype);
 results 
---------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN radians(360), 2*pi()
$$) AS (results gtype, Two_PI gtype);
     results      |      two_pi      
------------------+------------------
 6.28318530717959 | 6.28318530717959
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN degrees(2*pi())
$$) AS (results gtype);
 results 
---------
 360.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN radians(180), pi()
$$) AS (results gtype, PI gtype);
     results      |        pi        
------------------+------------------
 3.14159265358979 | 3.14159265358979
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN degrees(pi())
$$) AS (results gtype);
 results 
---------
 180.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN radians(90), pi()/2
$$) AS (results gtype, Half_PI gtype);
     results     |     half_pi     
-----------------+-----------------
 1.5707963267949 | 1.5707963267949
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN degrees(pi()/2)
$$) AS (results gtype);
 results 
---------
 90.0
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN radians(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN degrees(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN radians()
$$) AS (results gtype);
ERROR:  function postgraph.radians() does not exist
LINE 2:     RETURN radians()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN degrees()
$$) AS (results gtype);
ERROR:  function postgraph.degrees() does not exist
LINE 2:     RETURN degrees()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN radians("1")
$$) AS (results gtype);
ERROR:  radians() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN degrees("1")
$$) AS (results gtype);
ERROR:  degrees() unsupported argument gtype 1
--
-- abs(), ceil(), floor(), & round()
--
SELECT * FROM cypher('expr', $$
    RETURN abs(0)
$$) AS (results gtype);
 results 
---------
 0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN abs(10)
$$) AS (results gtype);
 results 
---------
 10
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN abs(-10)
$$) AS (results gtype);
 results 
---------
 10
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(0)
$$) AS (results gtype);
 results 
---------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(1)
$$) AS (results gtype);
 results 
---------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(-1)
$$) AS (results gtype);
 results 
---------
 -1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(1.01)
$$) AS (results gtype);
 results 
---------
 2.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(-1.01)
$$) AS (results gtype);
 results 
---------
 -1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(0)
$$) AS (results gtype);
 results 
---------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(1)
$$) AS (results gtype);
 results 
---------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(-1)
$$) AS (results gtype);
 results 
---------
 -1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(1.01)
$$) AS (results gtype);
 results 
---------
 1.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(-1.01)
$$) AS (results gtype);
 results 
---------
 -2.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(0)
$$) AS (results gtype);
 results 
---------
 0.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(4.49999999)
$$) AS (results gtype);
 results 
---------
 4.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(4.5)
$$) AS (results gtype);
 results 
---------
 5.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(-4.49999999)
$$) AS (results gtype);
 results 
---------
 -4.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(-4.5)
$$) AS (results gtype);
 results 
---------
 -5.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(7.4163, 3)
$$) AS (results gtype);
 results 
---------
 7.416
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(7.416343479, 8)
$$) AS (results gtype);
  results   
------------
 7.41634348
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(7.416343479, NULL)
$$) AS (results gtype);
 results 
---------
 7.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(NULL, 7)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(7, 2)
$$) AS (results gtype);
 results 
---------
 7.0
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(7.4342, 2.1123)
$$) AS (results gtype);
 results 
---------
 7.43
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(NULL, NULL)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sign(10)
$$) AS (results gtype);
 results 
---------
 1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sign(-10)
$$) AS (results gtype);
 results 
---------
 -1
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sign(0)
$$) AS (results gtype);
 results 
---------
 0
(1 row)

-- should return null
SELECT * FROM cypher('expr', $$
    RETURN abs(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN ceil(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN floor(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN round(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

SELECT * FROM cypher('expr', $$
    RETURN sign(null)
$$) AS (results gtype);
 results 
---------
 
(1 row)

-- should fail
SELECT * FROM cypher('expr', $$
    RETURN abs()
$$) AS (results gtype);
ERROR:  function postgraph.abs() does not exist
LINE 2:     RETURN abs()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN ceil()
$$) AS (results gtype);
ERROR:  function postgraph.ceil() does not exist
LINE 2:     RETURN ceil()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN floor()
$$) AS (results gtype);
ERROR:  function postgraph.floor() does not exist
LINE 2:     RETURN floor()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN round()
$$) AS (results gtype);
ERROR:  function postgraph.round() does not exist
LINE 2:     RETURN round()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN sign()
$$) AS (results gtype);
ERROR:  function postgraph.sign() does not exist
LINE 2:     RETURN sign()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('expr', $$
    RETURN abs("1")
$$) AS (results gtype);
ERROR:  abs() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN ceil("1")
$$) AS (results gtype);
ERROR:  ceil() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN floor("1")
$$) AS (results gtype);
ERROR:  floor() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN round("1")
$$) AS (results gtype);
ERROR:  round() unsupported argument gtype 1
SELECT * FROM cypher('expr', $$
    RETURN sign("1")
$$) AS (results gtype);
ERROR:  sign() unsupported argument gtype 1
--
-- rand()
--
-- should select 0 rows as rand() is in [0,1)
SELECT true FROM cypher('expr', $$
    RETURN rand()
$$) AS (result int)
WHERE result >= 1 or result < 0;
 bool 
------
(0 rows)

-- should select 0 rows as rand() should not return the same value
SELECT * FROM cypher('expr', $$
    RETURN rand()
$$) AS cypher_1(result gtype),
    cypher('expr', $$
    RETURN rand()
$$) AS cypher_2(result gtype)
WHERE cypher_1.result = cypher_2.result;
 result | result 
--------+--------
(0 rows)

--
-- log (ln) and log10
--
SELECT * from cypher('expr', $$
    RETURN log(2.718281828459045)
$$) as (result gtype);
 result 
--------
 1.0
(1 row)

SELECT * from cypher('expr', $$
    RETURN log10(10)
$$) as (result gtype);
 result 
--------
 1.0
(1 row)

-- should return null
SELECT * from cypher('expr', $$
    RETURN log(null)
$$) as (result gtype);
 result 
--------
 
(1 row)

SELECT * from cypher('expr', $$
    RETURN log10(null)
$$) as (result gtype);
 result 
--------
 
(1 row)

SELECT * from cypher('expr', $$
    RETURN log(0)
$$) as (result gtype);
ERROR:  cannot take logarithm of zero
SELECT * from cypher('expr', $$
    RETURN log10(0)
$$) as (result gtype);
ERROR:  cannot take logarithm of zero
SELECT * from cypher('expr', $$
    RETURN log(-1)
$$) as (result gtype);
ERROR:  cannot take logarithm of a negative number
SELECT * from cypher('expr', $$
    RETURN log10(-1)
$$) as (result gtype);
ERROR:  cannot take logarithm of a negative number
-- should fail
SELECT * from cypher('expr', $$
    RETURN log()
$$) as (result gtype);
ERROR:  function postgraph.log() does not exist
LINE 2:     RETURN log()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * from cypher('expr', $$
    RETURN log10()
$$) as (result gtype);
ERROR:  function postgraph.log10() does not exist
LINE 2:     RETURN log10()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- e()
--
SELECT * from cypher('expr', $$
    RETURN e()
$$) as (result gtype);
      result      
------------------
 2.71828182845905
(1 row)

SELECT * from cypher('expr', $$
    RETURN log(e())
$$) as (result gtype);
 result 
--------
 1.0
(1 row)

--
-- exp() aka e^x
--
SELECT * from cypher('expr', $$
    RETURN exp(1)
$$) as (result gtype);
      result      
------------------
 2.71828182845905
(1 row)

SELECT * from cypher('expr', $$
    RETURN exp(0)
$$) as (result gtype);
 result 
--------
 1.0
(1 row)

-- should return null
SELECT * from cypher('expr', $$
    RETURN exp(null)
$$) as (result gtype);
 result 
--------
 
(1 row)

-- should fail
SELECT * from cypher('expr', $$
    RETURN exp()
$$) as (result gtype);
ERROR:  function postgraph.exp() does not exist
LINE 2:     RETURN exp()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * from cypher('expr', $$
    RETURN exp("1")
$$) as (result gtype);
ERROR:  exp() unsupported argument gtype 1
--
-- sqrt()
--
SELECT * from cypher('expr', $$
    RETURN sqrt(25)
$$) as (result gtype);
 result 
--------
 5.0
(1 row)

SELECT * from cypher('expr', $$
    RETURN sqrt(1)
$$) as (result gtype);
 result 
--------
 1.0
(1 row)

SELECT * from cypher('expr', $$
    RETURN sqrt(0)
$$) as (result gtype);
 result 
--------
 0.0
(1 row)

-- should return null
SELECT * from cypher('expr', $$
    RETURN sqrt(-1)
$$) as (result gtype);
ERROR:  cannot take square root of a negative number
SELECT * from cypher('expr', $$
    RETURN sqrt(null)
$$) as (result gtype);
 result 
--------
 
(1 row)

-- should fail
SELECT * from cypher('expr', $$
    RETURN sqrt()
$$) as (result gtype);
ERROR:  function postgraph.sqrt() does not exist
LINE 2:     RETURN sqrt()
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * from cypher('expr', $$
    RETURN sqrt("1")
$$) as (result gtype);
ERROR:  sqrt() unsupported argument gtype 1
--
-- aggregate functions avg(), sum(), count(), & count(*)
--
SELECT create_graph('UCSC');
NOTICE:  graph "UCSC" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Jack", gpa: 3.0, age: 21, zip: 94110})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Jill", gpa: 3.5, age: 27, zip: 95060})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Jim", gpa: 3.75, age: 32, zip: 96062})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Rick", gpa: 2.5, age: 24, zip: "95060"})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Ann", gpa: 3.8::numeric, age: 23})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Derek", gpa: 4.0, age: 19, zip: 90210})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Jessica", gpa: 3.9::numeric, age: 20})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN (u) $$) AS (vertex vertex);
                                                       vertex                                                        
---------------------------------------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "students", "properties": {"age": 21, "gpa": 3.0, "zip": 94110, "name": "Jack"}}
 {"id": 844424930131970, "label": "students", "properties": {"age": 27, "gpa": 3.5, "zip": 95060, "name": "Jill"}}
 {"id": 844424930131971, "label": "students", "properties": {"age": 32, "gpa": 3.75, "zip": 96062, "name": "Jim"}}
 {"id": 844424930131972, "label": "students", "properties": {"age": 24, "gpa": 2.5, "zip": "95060", "name": "Rick"}}
 {"id": 844424930131973, "label": "students", "properties": {"age": 23, "gpa": 3.8::numeric, "name": "Ann"}}
 {"id": 844424930131974, "label": "students", "properties": {"age": 19, "gpa": 4.0, "zip": 90210, "name": "Derek"}}
 {"id": 844424930131975, "label": "students", "properties": {"age": 20, "gpa": 3.9::numeric, "name": "Jessica"}}
(7 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN avg(u.gpa), sum(u.gpa), sum(u.gpa)/count(u.gpa), count(u.gpa), count(*) $$) 
AS (avg gtype, sum gtype, sum_divided_by_count gtype, count gtype, count_star gtype);
       avg        |      sum       |    sum_divided_by_count     | count | count_star 
------------------+----------------+-----------------------------+-------+------------
 3.49285714285714 | 24.45::numeric | 3.4928571428571429::numeric | 7     | 7
(1 row)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Dave", age: 24})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Mike", age: 18})$$) AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN (u) $$) AS (vertex vertex);
                                                       vertex                                                        
---------------------------------------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "students", "properties": {"age": 21, "gpa": 3.0, "zip": 94110, "name": "Jack"}}
 {"id": 844424930131970, "label": "students", "properties": {"age": 27, "gpa": 3.5, "zip": 95060, "name": "Jill"}}
 {"id": 844424930131971, "label": "students", "properties": {"age": 32, "gpa": 3.75, "zip": 96062, "name": "Jim"}}
 {"id": 844424930131972, "label": "students", "properties": {"age": 24, "gpa": 2.5, "zip": "95060", "name": "Rick"}}
 {"id": 844424930131973, "label": "students", "properties": {"age": 23, "gpa": 3.8::numeric, "name": "Ann"}}
 {"id": 844424930131974, "label": "students", "properties": {"age": 19, "gpa": 4.0, "zip": 90210, "name": "Derek"}}
 {"id": 844424930131975, "label": "students", "properties": {"age": 20, "gpa": 3.9::numeric, "name": "Jessica"}}
 {"id": 844424930131976, "label": "students", "properties": {"age": 24, "name": "Dave"}}
 {"id": 844424930131977, "label": "students", "properties": {"age": 18, "name": "Mike"}}
(9 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN avg(u.gpa), sum(u.gpa), sum(u.gpa)/count(u.gpa), count(u.gpa), count(*) $$) 
AS (avg gtype, sum gtype, sum_divided_by_count gtype, count gtype, count_star gtype);
       avg        |      sum       |    sum_divided_by_count     | count | count_star 
------------------+----------------+-----------------------------+-------+------------
 3.49285714285714 | 24.45::numeric | 3.4928571428571429::numeric | 7     | 9
(1 row)

-- should return null
SELECT * FROM cypher('UCSC', $$ RETURN avg(NULL) $$) AS (avg gtype);
 avg 
-----
 
(1 row)

SELECT * FROM cypher('UCSC', $$ RETURN sum(NULL) $$) AS (sum gtype);
 sum 
-----
 
(1 row)

-- should return 0
SELECT * FROM cypher('UCSC', $$ RETURN count(NULL) $$) AS (count gtype);
 count 
-------
 0
(1 row)

-- should fail
SELECT * FROM cypher('UCSC', $$ RETURN avg() $$) AS (avg gtype);
ERROR:  function postgraph.avg() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN avg() $$) AS (avg gty...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('UCSC', $$ RETURN sum() $$) AS (sum gtype);
ERROR:  function postgraph.sum() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN sum() $$) AS (sum gty...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('UCSC', $$ RETURN count() $$) AS (count gtype);
ERROR:  postgraph.count(*) must be used to call a parameterless aggregate function
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN count() $$) AS (count...
                                               ^
--
-- aggregate functions min() & max()
--
SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN min(u.gpa), max(u.gpa), count(u.gpa), count(*) $$)
AS (min gtype, max gtype, count gtype, count_star gtype);
 min | max | count | count_star 
-----+-----+-------+------------
 2.5 | 4.0 | 7     | 9
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN min(u.gpa), max(u.gpa), count(u.gpa), count(*) $$)
AS (min gtype, max gtype, count gtype, count_star gtype);
 min | max | count | count_star 
-----+-----+-------+------------
 2.5 | 4.0 | 7     | 9
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN min(u.name), max(u.name), count(u.name), count(*) $$)
AS (min gtype, max gtype, count gtype, count_star gtype);
  min  |  max   | count | count_star 
-------+--------+-------+------------
 "Ann" | "Rick" | 9     | 9
(1 row)

-- check that min() & max() can work against mixed types
SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN min(u.zip), max(u.zip), count(u.zip), count(*) $$)
AS (min gtype, max gtype, count gtype, count_star gtype);
   min   |  max  | count | count_star 
---------+-------+-------+------------
 "95060" | 96062 | 5     | 9
(1 row)

CREATE TABLE min_max_tbl (id gtype);
insert into min_max_tbl VALUES ('16'::gtype), ('17188'::gtype), ('1000'::gtype), ('869'::gtype);
SELECT min(id), max(id) FROM min_max_tbl;
 min |  max  
-----+-------
 16  | 17188
(1 row)

SELECT min(tofloat(id)), max(tofloat(id)) FROM min_max_tbl;
 min  |   max   
------+---------
 16.0 | 17188.0
(1 row)

SELECT min(tonumeric(id)), max(tonumeric(id)) FROM min_max_tbl;
     min     |      max       
-------------+----------------
 16::numeric | 17188::numeric
(1 row)

SELECT min(tostring(id)), max(tostring(id)) FROM min_max_tbl;
  min   |  max  
--------+-------
 "1000" | "869"
(1 row)

DROP TABLE min_max_tbl;
-- should return null
SELECT * FROM cypher('UCSC', $$ RETURN min(NULL) $$) AS (min gtype);
 min 
-----
 
(1 row)

SELECT * FROM cypher('UCSC', $$ RETURN max(NULL) $$) AS (max gtype);
 max 
-----
 
(1 row)

SELECT min(NULL);
 min 
-----
 
(1 row)

SELECT min(gtype_in('null'));
 min 
-----
 
(1 row)

SELECT max(NULL);
 max 
-----
 
(1 row)

SELECT max(gtype_in('null'));
 max 
-----
 
(1 row)

-- should fail
SELECT * FROM cypher('UCSC', $$ RETURN min() $$) AS (min gtype);
ERROR:  function postgraph.min() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN min() $$) AS (min gty...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('UCSC', $$ RETURN max() $$) AS (max gtype);
ERROR:  function postgraph.max() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN max() $$) AS (max gty...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT min();
ERROR:  function min() does not exist
LINE 1: SELECT min();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT min();
ERROR:  function min() does not exist
LINE 1: SELECT min();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- aggregate functions stDev() & stDevP()
--
SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN stDev(u.gpa), stDevP(u.gpa) $$)
AS (stDev gtype, stDevP gtype);
       stdev       |      stdevp       
-------------------+-------------------
 0.549566929066706 | 0.508800109100232
(1 row)

-- should return 0
SELECT * FROM cypher('UCSC', $$ RETURN stDev(NULL) $$) AS (stDev gtype);
 stdev 
-------
 0.0
(1 row)

SELECT * FROM cypher('UCSC', $$ RETURN stDevP(NULL) $$) AS (stDevP gtype);
 stdevp 
--------
 0.0
(1 row)

-- should fail
SELECT * FROM cypher('UCSC', $$ RETURN stDev() $$) AS (stDev gtype);
ERROR:  function postgraph.stdev() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN stDev() $$) AS (stDev...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM cypher('UCSC', $$ RETURN stDevP() $$) AS (stDevP gtype);
ERROR:  function postgraph.stdevp() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN stDevP() $$) AS (stDe...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- aggregate functions percentileCont() & percentileDisc()
--
SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN percentileCont(u.gpa, .55), percentileDisc(u.gpa, .55), percentileCont(u.gpa, .9), percentileDisc(u.gpa, .9) $$)
AS (percentileCont1 gtype, percentileDisc1 gtype, percentileCont2 gtype, percentileDisc2 gtype);
 percentilecont1 | percentiledisc1 | percentilecont2 | percentiledisc2 
-----------------+-----------------+-----------------+-----------------
 3.765           | 3.75            | 3.94            | 4.0
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN percentileCont(u.gpa, .55) $$)
AS (percentileCont gtype);
 percentilecont 
----------------
 3.765
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN percentileDisc(u.gpa, .55) $$)
AS (percentileDisc gtype);
 percentiledisc 
----------------
 3.75
(1 row)

-- should return null
SELECT * FROM cypher('UCSC', $$ RETURN percentileCont(NULL, .5) $$) AS (percentileCont gtype);
 percentilecont 
----------------
 
(1 row)

SELECT * FROM cypher('UCSC', $$ RETURN percentileDisc(NULL, .5) $$) AS (percentileDisc gtype);
 percentiledisc 
----------------
 
(1 row)

-- should fail
SELECT * FROM cypher('UCSC', $$ RETURN percentileCont(.5, NULL) $$) AS (percentileCont gtype);
ERROR:  percentile value NULL is not a valid numeric value
SELECT * FROM cypher('UCSC', $$ RETURN percentileDisc(.5, NULL) $$) AS (percentileDisc gtype);
ERROR:  percentile value NULL is not a valid numeric value
--
-- aggregate function collect()
--
SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN collect(u.name), collect(u.age), collect(u.gpa), collect(u.zip) $$)
AS (name gtype, age gtype, gqa gtype, zip gtype);
                                    name                                    |                 age                  |                          gqa                           |                  zip                  
----------------------------------------------------------------------------+--------------------------------------+--------------------------------------------------------+---------------------------------------
 ["Jack", "Jill", "Jim", "Rick", "Ann", "Derek", "Jessica", "Dave", "Mike"] | [21, 27, 32, 24, 23, 19, 20, 24, 18] | [3.0, 3.5, 3.75, 2.5, 3.8::numeric, 4.0, 3.9::numeric] | [94110, 95060, 96062, "95060", 90210]
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN collect(u.gpa), collect(u.gpa) $$)
AS (gpa1 gtype, gpa2 gtype);
                          gpa1                          |                          gpa2                          
--------------------------------------------------------+--------------------------------------------------------
 [3.0, 3.5, 3.75, 2.5, 3.8::numeric, 4.0, 3.9::numeric] | [3.0, 3.5, 3.75, 2.5, 3.8::numeric, 4.0, 3.9::numeric]
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN collect(u.zip), collect(u.zip) $$)
AS (zip1 gtype, zip2 gtype);
                 zip1                  |                 zip2                  
---------------------------------------+---------------------------------------
 [94110, 95060, 96062, "95060", 90210] | [94110, 95060, 96062, "95060", 90210]
(1 row)

SELECT * FROM cypher('UCSC', $$ RETURN collect(5) $$) AS (result gtype);
 result 
--------
 [5]
(1 row)

-- should return an empty aray
SELECT * FROM cypher('UCSC', $$ RETURN collect(NULL) $$) AS (empty gtype);
 empty 
-------
 []
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) WHERE u.name =~ "doesn't exist" RETURN collect(u.name) $$) AS (name gtype);
 name 
------
 []
(1 row)

-- should fail
SELECT * FROM cypher('UCSC', $$ RETURN collect() $$) AS (collect gtype);
ERROR:  function postgraph.collect() does not exist
LINE 1: SELECT * FROM cypher('UCSC', $$ RETURN collect() $$) AS (col...
                                               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- test DISTINCT inside aggregate functions
SELECT * FROM cypher('UCSC', $$CREATE (:students {name: "Sven", gpa: 3.2, age: 27, zip: 94110})$$)
AS (a gtype);
 a 
---
(0 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN (u) $$) AS (vertex vertex);
                                                       vertex                                                        
---------------------------------------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "students", "properties": {"age": 21, "gpa": 3.0, "zip": 94110, "name": "Jack"}}
 {"id": 844424930131970, "label": "students", "properties": {"age": 27, "gpa": 3.5, "zip": 95060, "name": "Jill"}}
 {"id": 844424930131971, "label": "students", "properties": {"age": 32, "gpa": 3.75, "zip": 96062, "name": "Jim"}}
 {"id": 844424930131972, "label": "students", "properties": {"age": 24, "gpa": 2.5, "zip": "95060", "name": "Rick"}}
 {"id": 844424930131973, "label": "students", "properties": {"age": 23, "gpa": 3.8::numeric, "name": "Ann"}}
 {"id": 844424930131974, "label": "students", "properties": {"age": 19, "gpa": 4.0, "zip": 90210, "name": "Derek"}}
 {"id": 844424930131975, "label": "students", "properties": {"age": 20, "gpa": 3.9::numeric, "name": "Jessica"}}
 {"id": 844424930131976, "label": "students", "properties": {"age": 24, "name": "Dave"}}
 {"id": 844424930131977, "label": "students", "properties": {"age": 18, "name": "Mike"}}
 {"id": 844424930131978, "label": "students", "properties": {"age": 27, "gpa": 3.2, "zip": 94110, "name": "Sven"}}
(10 rows)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN count(u.zip), count(DISTINCT u.zip) $$)
AS (zip gtype, distinct_zip gtype);
 zip | distinct_zip 
-----+--------------
 6   | 5
(1 row)

SELECT * FROM cypher('UCSC', $$ MATCH (u) RETURN count(u.age), count(DISTINCT u.age) $$)
AS (age gtype, distinct_age gtype);
 age | distinct_age 
-----+--------------
 10  | 8
(1 row)

-- test AUTO GROUP BY for aggregate functions
SELECT create_graph('group_by');
NOTICE:  graph "group_by" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('group_by', $$CREATE (:row {i: 1, j: 2, k:3})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$CREATE (:row {i: 1, j: 2, k:4})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$CREATE (:row {i: 1, j: 3, k:5})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$CREATE (:row {i: 2, j: 3, k:6})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$MATCH (u:row) RETURN u.i, u.j, u.k$$) AS (i gtype, j gtype, k gtype);
 i | j | k 
---+---+---
 1 | 2 | 3
 1 | 2 | 4
 1 | 3 | 5
 2 | 3 | 6
(4 rows)

SELECT * FROM cypher('group_by', $$MATCH (u:row) RETURN u.i, u.j, sum(u.k)$$) AS (i gtype, j gtype, sumk gtype);
 i | j | sumk 
---+---+------
 1 | 2 | 7
 2 | 3 | 6
 1 | 3 | 5
(3 rows)

SELECT * FROM cypher('group_by', $$CREATE (:L {a: 1, b: 2, c:3})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$CREATE (:L {a: 2, b: 3, c:1})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$CREATE (:L {a: 3, b: 1, c:2})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('group_by', $$MATCH (x:L) RETURN x.a, x.b, x.c, x.a + count(*) + x.b + count(*) + x.c$$)
AS (a gtype, b gtype, c gtype, result gtype);
 a | b | c | result 
---+---+---+--------
 3 | 1 | 2 | 8
 2 | 3 | 1 | 8
 1 | 2 | 3 | 8
(3 rows)

SELECT * FROM cypher('group_by', $$MATCH (x:L) RETURN x.a + x.b + x.c, x.a + x.b + x.c + count(*) + count(*) $$)
AS (a_b_c gtype,  result gtype);
 a_b_c | result 
-------+--------
 6     | 12
(1 row)

-- with WITH clause
SELECT * FROM cypher('group_by', $$MATCH(x:L) WITH x, count(x) AS c RETURN x.a + x.b + x.c + c$$)
AS (result gtype);
ERROR:  could not identify an equality operator for type vertex
LINE 1: ...ELECT * FROM cypher('group_by', $$MATCH(x:L) WITH x, count(x...
                                                             ^
SELECT * FROM cypher('group_by', $$MATCH(x:L) WITH x, count(x) AS c RETURN x.a + x.b + x.c + c + c$$)
AS (result gtype);
ERROR:  could not identify an equality operator for type vertex
LINE 1: ...ELECT * FROM cypher('group_by', $$MATCH(x:L) WITH x, count(x...
                                                             ^
SELECT * FROM cypher('group_by', $$MATCH(x:L) WITH x.a + x.b + x.c AS v, count(x) as c RETURN v + c + c $$)
AS (result gtype);
 result 
--------
 12
(1 row)

-- should fail
SELECT * FROM cypher('group_by', $$MATCH (x:L) RETURN x.a, x.a + count(*) + x.b + count(*) + x.c$$)
AS (a gtype, result gtype);
ERROR:  "x" must be either part of an explicitly listed key or used inside an aggregate function
LINE 1: ...p_by', $$MATCH (x:L) RETURN x.a, x.a + count(*) + x.b + coun...
                                                             ^
SELECT * FROM cypher('group_by', $$MATCH (x:L) RETURN x.a + count(*) + x.b + count(*) + x.c$$)
AS (result gtype);
ERROR:  "x" must be either part of an explicitly listed key or used inside an aggregate function
LINE 1: ...CT * FROM cypher('group_by', $$MATCH (x:L) RETURN x.a + coun...
                                                             ^
--ORDER BY
SELECT create_graph('order_by');
NOTICE:  graph "order_by" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('order_by', $$CREATE ()$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: '1'})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: 1})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: 1.0})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: 1::numeric})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: true})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: false})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: {key: 'value'}})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$CREATE ({i: [1]})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('order_by', $$
	MATCH (u)
	RETURN u.i
	ORDER BY u.i
$$) AS (i gtype);
        i         
------------------
 {"key": "value"}
 [1]
 "1"
 false
 true
 1::numeric
 1
 1.0
 
(9 rows)

SELECT * FROM cypher('order_by', $$
	MATCH (u)
	RETURN u.i
	ORDER BY u.i DESC
$$) AS (i gtype);
        i         
------------------
 
 1
 1.0
 1::numeric
 true
 false
 "1"
 [1]
 {"key": "value"}
(9 rows)

--CASE
SELECT create_graph('case_statement');
NOTICE:  graph "case_statement" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('case_statement', $$CREATE ({i: 1, j: null})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('case_statement', $$CREATE ({i: 'a', j: 'b'})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('case_statement', $$CREATE ({i: 0, j: 1})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('case_statement', $$CREATE ({i: true, j: false})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('case_statement', $$CREATE ({i: [], j: [0,1,2]})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('case_statement', $$CREATE ({i: {}, j: {i:1}})$$) AS (result gtype);
 result 
--------
(0 rows)

--CASE WHEN condition THEN result END
SELECT * FROM cypher('case_statement', $$
	MATCH (n)
	RETURN n.i, n.j, CASE
    WHEN null THEN 'should not return me'
		WHEN n.i = 1 THEN 'i is 1'
		WHEN n.j = 'b' THEN 'j is b'
    WHEN n.i = 0 AND n.j = 1 THEN '0 AND 1'
    WHEN n.i = true OR n.j = true THEN 'i or j true'
		ELSE 'default'
	END
$$ ) AS (i gtype, j gtype, case_statement gtype);
  i   |     j     | case_statement 
------+-----------+----------------
 1    |           | "i is 1"
 "a"  | "b"       | "j is b"
 0    | 1         | "0 AND 1"
 true | false     | "i or j true"
 []   | [0, 1, 2] | "default"
 {}   | {"i": 1}  | "default"
(6 rows)

--CASE expression WHEN value THEN result END
SELECT * FROM cypher('case_statement', $$
	MATCH (n)
	RETURN n.j, CASE n.j
    WHEN null THEN 'should not return me'
    WHEN 'b' THEN 'b'
    WHEN 1 THEN 1
    WHEN false THEN false
    WHEN [0,1,2] THEN [0,1,2]
    WHEN {i:1} THEN {i:1}
		ELSE 'not a or b'
	END
$$ ) AS (j gtype, case_statement gtype);
     j     | case_statement 
-----------+----------------
           | "not a or b"
 "b"       | "b"
 1         | 1
 false     | false
 [0, 1, 2] | [0, 1, 2]
 {"i": 1}  | {"i": 1}
(6 rows)

-- RETURN * and (u)--(v) optional forms
SELECT create_graph('opt_forms');
NOTICE:  graph "opt_forms" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('opt_forms', $$CREATE ({i:1})-[:KNOWS]->({i:2})<-[:KNOWS]-({i:3})$$)AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u) RETURN u$$) AS (result vertex);
                            result                            
--------------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {"i": 1}}
 {"id": 281474976710658, "label": "", "properties": {"i": 2}}
 {"id": 281474976710659, "label": "", "properties": {"i": 3}}
(3 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u) RETURN *$$) AS (result vertex);
                            result                            
--------------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {"i": 1}}
 {"id": 281474976710658, "label": "", "properties": {"i": 2}}
 {"id": 281474976710659, "label": "", "properties": {"i": 3}}
(3 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u)--(v) RETURN u.i, v.i$$) AS (u gtype, v gtype);
 u | v 
---+---
 2 | 3
 3 | 2
 1 | 2
 2 | 1
(4 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u)-->(v) RETURN u.i, v.i$$) AS (u gtype, v gtype);
 u | v 
---+---
 3 | 2
 1 | 2
(2 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u)<--(v) RETURN u.i, v.i$$) AS (u gtype, v gtype);
 u | v 
---+---
 2 | 3
 2 | 1
(2 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u)-->()<--(v) RETURN u.i, v.i$$) AS (u gtype, v gtype);
 u | v 
---+---
 3 | 1
 1 | 3
(2 rows)

SELECT * FROM cypher('opt_forms', $$MATCH (u) CREATE (u)-[:edge]->() RETURN *$$) AS (results vertex);
ERROR:  return row and column definition list do not match
LINE 1: SELECT * FROM cypher('opt_forms', $$MATCH (u) CREATE (u)-[:e...
                      ^
SELECT * FROM cypher('opt_forms', $$MATCH (u)-->()<--(v) RETURN *$$) AS (col1 vertex, col2 vertex);
                             col1                             |                             col2                             
--------------------------------------------------------------+--------------------------------------------------------------
 {"id": 281474976710659, "label": "", "properties": {"i": 3}} | {"id": 281474976710657, "label": "", "properties": {"i": 1}}
 {"id": 281474976710657, "label": "", "properties": {"i": 1}} | {"id": 281474976710659, "label": "", "properties": {"i": 3}}
(2 rows)

-- list functions range(), keys()
SELECT create_graph('keys');
NOTICE:  graph "keys" has been created
 create_graph 
--------------
 
(1 row)

-- keys()
SELECT * FROM cypher('keys', $$CREATE ({name: 'hikaru utada', age: 38, job: 'singer'})-[:collaborated_with {song:"face my fears"}]->( {name: 'sonny moore', age: 33, stage_name: 'skrillex', job: 'producer'})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('keys', $$CREATE ({name: 'alexander guy cook', age: 31, stage_name:"a. g. cook", job: 'producer'})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('keys', $$CREATE ({name: 'keiko fuji', age: 62, job: 'singer'})$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('keys', $$MATCH (a),(b) WHERE a.name = 'hikaru utada' AND b.name = 'alexander guy cook' CREATE (a)-[:collaborated_with {song:"one last kiss"}]->(b)$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('keys', $$MATCH (a),(b) WHERE a.name = 'hikaru utada' AND b.name = 'keiko fuji' CREATE (a)-[:knows]->(b)$$) AS (result gtype);
 result 
--------
(0 rows)

SELECT * FROM cypher('keys', $$MATCH (v) RETURN keys(v)$$) AS (vertex_keys gtype);
             vertex_keys              
--------------------------------------
 ["age", "job", "name"]
 ["age", "job", "name", "stage_name"]
 ["age", "job", "name", "stage_name"]
 ["age", "job", "name"]
(4 rows)

SELECT * FROM cypher('keys', $$MATCH ()-[e]-() RETURN keys(e)$$) AS (edge_keys gtype);
 edge_keys 
-----------
 []
 []
 ["song"]
 ["song"]
 ["song"]
 ["song"]
(6 rows)

SELECT * FROM cypher('keys', $$RETURN keys({a:1,b:'two',c:[1,2,3]})$$) AS (keys gtype);
      keys       
-----------------
 ["a", "b", "c"]
(1 row)

--should return empty list
SELECT * FROM cypher('keys', $$RETURN keys({})$$) AS (keys gtype);
 keys 
------
 []
(1 row)

--should return sql null
SELECT * FROM cypher('keys', $$RETURN keys(null)$$) AS (keys gtype);
 keys 
------
 
(1 row)

--should return error
SELECT * from cypher('keys', $$RETURN keys([1,2,3])$$) as (keys gtype);
ERROR:  keys() argument must be an object
SELECT * from cypher('keys', $$RETURN keys("string")$$) as (keys gtype);
ERROR:  keys() argument must be an object
SELECT * from cypher('keys', $$MATCH u=()-[]-() RETURN keys(u)$$) as (keys gtype);
ERROR:  function postgraph.keys(traversal) does not exist
LINE 1: ...T * from cypher('keys', $$MATCH u=()-[]-() RETURN keys(u)$$)...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT create_graph('list');
NOTICE:  graph "list" has been created
 create_graph 
--------------
 
(1 row)

SELECT * from cypher('list', $$CREATE p=({name:"rick"})-[:knows]->({name:"morty"}) RETURN p$$) as (path traversal);
                                                                                                                                path                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 281474976710657, "label": "", "properties": {"name": "rick"}}, {"id": 844424930131969, "start_id": 281474976710657, "end_id": 281474976710658, "label": "knows", "properties": {}}, {"id": 281474976710658, "label": "", "properties": {"name": "morty"}}]
(1 row)

SELECT * from cypher('list', $$CREATE p=({name:'rachael'})-[:knows]->({name:'monica'})-[:knows]->({name:'phoebe'}) RETURN p$$) as (path traversal);
                                                                                                                                                                                                                                path                                                                                                                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 281474976710659, "label": "", "properties": {"name": "rachael"}}, {"id": 844424930131971, "start_id": 281474976710659, "end_id": 281474976710660, "label": "knows", "properties": {}}, {"id": 281474976710660, "label": "", "properties": {"name": "monica"}}, {"id": 844424930131970, "start_id": 281474976710660, "end_id": 281474976710661, "label": "knows", "properties": {}}, {"id": 281474976710661, "label": "", "properties": {"name": "phoebe"}}]
(1 row)

-- range()
SELECT * from cypher('list', $$RETURN range(0, 10)$$) as (range gtype);
               range                
------------------------------------
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, 10, null)$$) as (range gtype);
               range                
------------------------------------
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, 10, 1)$$) as (range gtype);
               range                
------------------------------------
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, 10, 3)$$) as (range gtype);
    range     
--------------
 [0, 3, 6, 9]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, -10, -1)$$) as (range gtype);
                    range                     
----------------------------------------------
 [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, -10, -3)$$) as (range gtype);
      range      
-----------------
 [0, -3, -6, -9]
(1 row)

SELECT * from cypher('list', $$RETURN range(0, 10, 11)$$) as (range gtype);
 range 
-------
 [0]
(1 row)

SELECT * from cypher('list', $$RETURN range(-20, 10, 5)$$) as (range gtype);
             range             
-------------------------------
 [-20, -15, -10, -5, 0, 5, 10]
(1 row)

-- should return an empty list []
SELECT * from cypher('list', $$RETURN range(0, -10)$$) as (range gtype);
 range 
-------
 []
(1 row)

SELECT * from cypher('list', $$RETURN range(0, 10, -1)$$) as (range gtype);
 range 
-------
 []
(1 row)

SELECT * from cypher('list', $$RETURN range(-10, 10, -1)$$) as (range gtype);
 range 
-------
 []
(1 row)

-- should return an error
SELECT * from cypher('list', $$RETURN range(null, -10, -3)$$) as (range gtype);
ERROR:  range(): neither start or end can be NULL
SELECT * from cypher('list', $$RETURN range(0, null, -3)$$) as (range gtype);
ERROR:  range(): neither start or end can be NULL
SELECT * from cypher('list', $$RETURN range(0, -10.0, -3.0)$$) as (range gtype);
ERROR:  range() unsupported argument type
-- labels()
SELECT * from cypher('list', $$CREATE (u:People {name: "John"}) RETURN u$$) as (Vertices vertex);
                                  vertices                                   
-----------------------------------------------------------------------------
 {"id": 1125899906842625, "label": "People", "properties": {"name": "John"}}
(1 row)

SELECT * from cypher('list', $$CREATE (u:People {name: "Larry"}) RETURN u$$) as (Vertices vertex);
                                   vertices                                   
------------------------------------------------------------------------------
 {"id": 1125899906842626, "label": "People", "properties": {"name": "Larry"}}
(1 row)

SELECT * from cypher('list', $$CREATE (u:Cars {name: "G35"}) RETURN u$$) as (Vertices vertex);
                                 vertices                                 
--------------------------------------------------------------------------
 {"id": 1407374883553281, "label": "Cars", "properties": {"name": "G35"}}
(1 row)

SELECT * from cypher('list', $$CREATE (u:Cars {name: "MR2"}) RETURN u$$) as (Vertices vertex);
                                 vertices                                 
--------------------------------------------------------------------------
 {"id": 1407374883553282, "label": "Cars", "properties": {"name": "MR2"}}
(1 row)

SELECT * from cypher('list', $$MATCH (u) RETURN labels(u), u$$) as (Labels gtype, Vertices vertex);
ERROR:  function postgraph.labels(vertex) does not exist
LINE 1: SELECT * from cypher('list', $$MATCH (u) RETURN labels(u), u...
                                                        ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should return SQL NULL
SELECT * from cypher('list', $$RETURN labels(NULL)$$) as (Labels gtype);
ERROR:  function postgraph.labels(gtype) does not exist
LINE 1: SELECT * from cypher('list', $$RETURN labels(NULL)$$) as (La...
                                              ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should return an error
SELECT * from cypher('list', $$RETURN labels("string")$$) as (Labels gtype);
ERROR:  function postgraph.labels(gtype) does not exist
LINE 1: SELECT * from cypher('list', $$RETURN labels("string")$$) as...
                                              ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- Cleanup
--
SELECT * FROM drop_graph('chained', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table chained._ag_label_vertex
drop cascades to table chained._ag_label_edge
drop cascades to table chained.people
NOTICE:  graph "chained" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('case_statement', true);
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table case_statement._ag_label_vertex
drop cascades to table case_statement._ag_label_edge
NOTICE:  graph "case_statement" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('opt_forms', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table opt_forms._ag_label_vertex
drop cascades to table opt_forms._ag_label_edge
drop cascades to table opt_forms."KNOWS"
NOTICE:  graph "opt_forms" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('type_coercion', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table type_coercion._ag_label_vertex
drop cascades to table type_coercion._ag_label_edge
drop cascades to table type_coercion.edge
NOTICE:  graph "type_coercion" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('order_by', true);
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table order_by._ag_label_vertex
drop cascades to table order_by._ag_label_edge
NOTICE:  graph "order_by" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('group_by', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table group_by._ag_label_vertex
drop cascades to table group_by._ag_label_edge
drop cascades to table group_by."row"
drop cascades to table group_by."L"
NOTICE:  graph "group_by" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('UCSC', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table "UCSC"._ag_label_vertex
drop cascades to table "UCSC"._ag_label_edge
drop cascades to table "UCSC".students
NOTICE:  graph "UCSC" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('expr', true);
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table expr._ag_label_vertex
drop cascades to table expr._ag_label_edge
drop cascades to table expr.v
drop cascades to table expr.v1
drop cascades to table expr.e1
NOTICE:  graph "expr" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('regex', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table regex._ag_label_vertex
drop cascades to table regex._ag_label_edge
drop cascades to table regex."Person"
NOTICE:  graph "regex" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('keys', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table keys._ag_label_vertex
drop cascades to table keys._ag_label_edge
drop cascades to table keys.collaborated_with
drop cascades to table keys.knows
NOTICE:  graph "keys" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT * FROM drop_graph('list', true);
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table list._ag_label_vertex
drop cascades to table list._ag_label_edge
drop cascades to table list.knows
drop cascades to table list."People"
drop cascades to table list."Cars"
NOTICE:  graph "list" has been dropped
 drop_graph 
------------
 
(1 row)

--
-- End of tests
--
