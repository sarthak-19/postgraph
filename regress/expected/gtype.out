/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
--
-- AGTYPE data type regression tests
--
--
-- Load extension and set path
--
LOAD 'postgraph';
SET extra_float_digits = 0;
SET search_path TO postgraph;
--
-- Create a table using the AGTYPE type
--
CREATE TABLE gtype_table (type text, gtype gtype);
--
-- Insert values to exercise gtype_in/gtype_out
--
INSERT INTO gtype_table VALUES ('bool', 'true');
INSERT INTO gtype_table VALUES ('bool', 'false');
INSERT INTO gtype_table VALUES ('null', 'null');
INSERT INTO gtype_table VALUES ('string', '""');
INSERT INTO gtype_table VALUES ('string', '"This is a string"');
INSERT INTO gtype_table VALUES ('integer', '0');
INSERT INTO gtype_table VALUES ('integer', '9223372036854775807');
INSERT INTO gtype_table VALUES ('integer', '-9223372036854775808');
INSERT INTO gtype_table VALUES ('float', '0.0');
INSERT INTO gtype_table VALUES ('float', '1.0');
INSERT INTO gtype_table VALUES ('float', '-1.0');
INSERT INTO gtype_table VALUES ('float', '100000000.000001');
INSERT INTO gtype_table VALUES ('float', '-100000000.000001');
INSERT INTO gtype_table VALUES ('float', '0.00000000000000012345');
INSERT INTO gtype_table VALUES ('float', '-0.00000000000000012345');
INSERT INTO gtype_table VALUES ('numeric', '100000000000.0000000000001::numeric');
INSERT INTO gtype_table VALUES ('numeric', '-100000000000.0000000000001::numeric');
INSERT INTO gtype_table VALUES ('timestamp', '"2023-06-23 13:39:40.00"::timestamp');
INSERT INTO gtype_table VALUES ('timestamp', '"06/23/2023 13:39:40.00"::timestamp');
INSERT INTO gtype_table VALUES ('timestamp', '"Fri Jun 23 13:39:40.00 2023"::timestamp');
INSERT INTO gtype_table VALUES ('integer array',
	'[-9223372036854775808, -1, 0, 1, 9223372036854775807]');
INSERT INTO gtype_table VALUES('float array',
	'[-0.00000000000000012345, -100000000.000001, -1.0, 0.0, 1.0, 100000000.000001, 0.00000000000000012345]');
INSERT INTO gtype_table VALUES('mixed array', '[true, false, null, "string", 1, 1.0, {"bool":true}, -1::numeric, [1,3,5]]');
INSERT INTO gtype_table VALUES('object', '{"bool":true, "null":null, "string":"string", "integer":1, "float":1.2, "arrayi":[-1,0,1], "arrayf":[-1.0, 0.0, 1.0], "object":{"bool":true, "null":null, "string":"string", "int":1, "float":8.0}}');
INSERT INTO gtype_table VALUES ('numeric array',
        '[-5::numeric, -1::numeric, 0::numeric, 1::numeric, 9223372036854775807::numeric]');
--
-- Special float values: NaN, +/- Infinity
--
INSERT INTO gtype_table VALUES ('float  nan', 'nan');
INSERT INTO gtype_table VALUES ('float  Infinity', 'Infinity');
INSERT INTO gtype_table VALUES ('float -Infinity', '-Infinity');
INSERT INTO gtype_table VALUES ('float  inf', 'inf');
INSERT INTO gtype_table VALUES ('float -inf', '-inf');
SELECT * FROM gtype_table;
      type       |                                                                                                       gtype                                                                                                        
-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 bool            | true
 bool            | false
 null            | null
 string          | ""
 string          | "This is a string"
 integer         | 0
 integer         | 9223372036854775807
 integer         | -9223372036854775808
 float           | 0.0
 float           | 1.0
 float           | -1.0
 float           | 100000000.000001
 float           | -100000000.000001
 float           | 1.2345e-16
 float           | -1.2345e-16
 numeric         | 100000000000.0000000000001::numeric
 numeric         | -100000000000.0000000000001::numeric
 timestamp       | Fri Jun 23 13:39:40 2023
 timestamp       | Fri Jun 23 13:39:40 2023
 timestamp       | Fri Jun 23 13:39:40 2023
 integer array   | [-9223372036854775808, -1, 0, 1, 9223372036854775807]
 float array     | [-1.2345e-16, -100000000.000001, -1.0, 0.0, 1.0, 100000000.000001, 1.2345e-16]
 mixed array     | [true, false, null, "string", 1, 1.0, {"bool": true}, -1::numeric, [1, 3, 5]]
 object          | {"bool": true, "null": null, "float": 1.2, "arrayf": [-1.0, 0.0, 1.0], "arrayi": [-1, 0, 1], "object": {"int": 1, "bool": true, "null": null, "float": 8.0, "string": "string"}, "string": "string", "integer": 1}
 numeric array   | [-5::numeric, -1::numeric, 0::numeric, 1::numeric, 9223372036854775807::numeric]
 float  nan      | NaN
 float  Infinity | Infinity
 float -Infinity | -Infinity
 float  inf      | Infinity
 float -inf      | -Infinity
(30 rows)

--
-- These should fail
--
INSERT INTO gtype_table VALUES ('bad integer', '9223372036854775808');
ERROR:  value "9223372036854775808" is out of range for type bigint
LINE 1: INSERT INTO gtype_table VALUES ('bad integer', '922337203685...
                                                       ^
INSERT INTO gtype_table VALUES ('bad integer', '-9223372036854775809');
ERROR:  value "-9223372036854775809" is out of range for type bigint
LINE 1: INSERT INTO gtype_table VALUES ('bad integer', '-92233720368...
                                                       ^
INSERT INTO gtype_table VALUES ('bad float', '-NaN');
ERROR:  invalid input syntax for type gtype
LINE 1: INSERT INTO gtype_table VALUES ('bad float', '-NaN');
                                                     ^
DETAIL:  Token "-NaN" is invalid.
CONTEXT:  gtype data, line 1: -NaN
INSERT INTO gtype_table VALUES ('bad float', 'Infi');
ERROR:  invalid input syntax for type gtype
LINE 1: INSERT INTO gtype_table VALUES ('bad float', 'Infi');
                                                     ^
DETAIL:  Expected gtype value, but found "Infi".
CONTEXT:  gtype data, line 1: Infi
INSERT INTO gtype_table VALUES ('bad float', '-Infi');
ERROR:  invalid input syntax for type gtype
LINE 1: INSERT INTO gtype_table VALUES ('bad float', '-Infi');
                                                     ^
DETAIL:  Token "-Infi" is invalid.
CONTEXT:  gtype data, line 1: -Infi
--
-- Test gtype mathematical operator functions
-- +, -, unary -, *, /, %, and ^
--
SELECT gtype_add('1', '-1');
 gtype_add 
-----------
 0
(1 row)

SELECT gtype_add('1', '-1.0');
 gtype_add 
-----------
 0.0
(1 row)

SELECT gtype_add('1.0', '-1');
 gtype_add 
-----------
 0.0
(1 row)

SELECT gtype_add('1.0', '-1.0');
 gtype_add 
-----------
 0.0
(1 row)

SELECT gtype_add('1', '-1.0::numeric');
  gtype_add   
--------------
 0.0::numeric
(1 row)

SELECT gtype_add('1.0', '-1.0::numeric');
  gtype_add   
--------------
 0.0::numeric
(1 row)

SELECT gtype_add('1::numeric', '-1.0::numeric');
  gtype_add   
--------------
 0.0::numeric
(1 row)

SELECT gtype_sub('-1', '-1');
 gtype_sub 
-----------
 0
(1 row)

SELECT gtype_sub('-1', '-1.0');
 gtype_sub 
-----------
 0.0
(1 row)

SELECT gtype_sub('-1.0', '-1');
 gtype_sub 
-----------
 0.0
(1 row)

SELECT gtype_sub('-1.0', '-1.0');
 gtype_sub 
-----------
 0.0
(1 row)

SELECT gtype_sub('1', '-1.0::numeric');
  gtype_sub   
--------------
 2.0::numeric
(1 row)

SELECT gtype_sub('1.0', '-1.0::numeric');
  gtype_sub   
--------------
 2.0::numeric
(1 row)

SELECT gtype_sub('1::numeric', '-1.0::numeric');
  gtype_sub   
--------------
 2.0::numeric
(1 row)

SELECT gtype_neg('-1');
 gtype_neg 
-----------
 1
(1 row)

SELECT gtype_neg('-1.0');
 gtype_neg 
-----------
 1.0
(1 row)

SELECT gtype_neg('0');
 gtype_neg 
-----------
 0
(1 row)

SELECT gtype_neg('0.0');
 gtype_neg 
-----------
 -0.0
(1 row)

SELECT gtype_neg('0::numeric');
 gtype_neg  
------------
 0::numeric
(1 row)

SELECT gtype_neg('-1::numeric');
 gtype_neg  
------------
 1::numeric
(1 row)

SELECT gtype_neg('1::numeric');
  gtype_neg  
-------------
 -1::numeric
(1 row)

SELECT gtype_mul('-2', '3');
 gtype_mul 
-----------
 -6
(1 row)

SELECT gtype_mul('2', '-3.0');
 gtype_mul 
-----------
 -6.0
(1 row)

SELECT gtype_mul('-2.0', '3');
 gtype_mul 
-----------
 -6.0
(1 row)

SELECT gtype_mul('2.0', '-3.0');
 gtype_mul 
-----------
 -6.0
(1 row)

SELECT gtype_mul('-2', '3::numeric');
  gtype_mul  
-------------
 -6::numeric
(1 row)

SELECT gtype_mul('2.0', '-3::numeric');
  gtype_mul  
-------------
 -6::numeric
(1 row)

SELECT gtype_mul('-2.0::numeric', '3::numeric');
   gtype_mul   
---------------
 -6.0::numeric
(1 row)

SELECT gtype_div('-4', '3');
 gtype_div 
-----------
 -1
(1 row)

SELECT gtype_div('4', '-3.0');
     gtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT gtype_div('-4.0', '3');
     gtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT gtype_div('4.0', '-3.0');
     gtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT gtype_div('4', '-3.0::numeric');
          gtype_div           
------------------------------
 -1.3333333333333333::numeric
(1 row)

SELECT gtype_div('-4.0', '3::numeric');
          gtype_div           
------------------------------
 -1.3333333333333333::numeric
(1 row)

SELECT gtype_div('4.0::numeric', '-3::numeric');
          gtype_div           
------------------------------
 -1.3333333333333333::numeric
(1 row)

SELECT gtype_mod('-11', '3');
 gtype_mod 
-----------
 -2
(1 row)

SELECT gtype_mod('11', '-3.0');
 gtype_mod 
-----------
 2.0
(1 row)

SELECT gtype_mod('-11.0', '3');
 gtype_mod 
-----------
 -2.0
(1 row)

SELECT gtype_mod('11.0', '-3.0');
 gtype_mod 
-----------
 2.0
(1 row)

SELECT gtype_mod('11', '-3.0::numeric');
  gtype_mod   
--------------
 2.0::numeric
(1 row)

SELECT gtype_mod('-11.0', '3::numeric');
  gtype_mod  
-------------
 -2::numeric
(1 row)

SELECT gtype_mod('11.0::numeric', '-3::numeric');
  gtype_mod   
--------------
 2.0::numeric
(1 row)

SELECT gtype_pow('-2', '3');
 gtype_pow 
-----------
 -8.0
(1 row)

SELECT gtype_pow('2', '-1.0');
 gtype_pow 
-----------
 0.5
(1 row)

SELECT gtype_pow('2.0', '3');
 gtype_pow 
-----------
 8.0
(1 row)

SELECT gtype_pow('2.0', '-1.0');
 gtype_pow 
-----------
 0.5
(1 row)

SELECT gtype_pow('2::numeric', '3');
          gtype_pow          
-----------------------------
 8.0000000000000000::numeric
(1 row)

SELECT gtype_pow('2::numeric', '-1.0');
          gtype_pow          
-----------------------------
 0.5000000000000000::numeric
(1 row)

SELECT gtype_pow('-2', '3::numeric');
          gtype_pow           
------------------------------
 -8.0000000000000000::numeric
(1 row)

SELECT gtype_pow('2.0', '-1.0::numeric');
          gtype_pow          
-----------------------------
 0.5000000000000000::numeric
(1 row)

SELECT gtype_pow('2.0::numeric', '-1.0::numeric');
          gtype_pow          
-----------------------------
 0.5000000000000000::numeric
(1 row)

--
-- Should fail with divide by zero
--
SELECT gtype_div('1', '0');
ERROR:  division by zero
SELECT gtype_div('1', '0.0');
ERROR:  division by zero
SELECT gtype_div('1.0', '0');
ERROR:  division by zero
SELECT gtype_div('1.0', '0.0');
ERROR:  division by zero
SELECT gtype_div('1', '0::numeric');
ERROR:  division by zero
SELECT gtype_div('1.0', '0::numeric');
ERROR:  division by zero
SELECT gtype_div('1::numeric', '0');
ERROR:  division by zero
SELECT gtype_div('1::numeric', '0.0');
ERROR:  division by zero
SELECT gtype_div('1::numeric', '0::numeric');
ERROR:  division by zero
--
-- Should get Infinity
--
SELECT gtype_pow('0', '-1');
 gtype_pow 
-----------
 Infinity
(1 row)

SELECT gtype_pow('-0.0', '-1');
 gtype_pow 
-----------
 -Infinity
(1 row)

--
-- Should get - ERROR:  zero raised to a negative power is undefined
--
SELECT gtype_pow('0', '-1::numeric');
ERROR:  zero raised to a negative power is undefined
SELECT gtype_pow('-0.0', '-1::numeric');
ERROR:  zero raised to a negative power is undefined
SELECT gtype_pow('0::numeric', '-1');
ERROR:  zero raised to a negative power is undefined
SELECT gtype_pow('-0.0::numeric', '-1');
ERROR:  zero raised to a negative power is undefined
SELECT gtype_pow('-0.0::numeric', '-1');
ERROR:  zero raised to a negative power is undefined
--
-- Test operators +, -, unary -, *, /, %, and ^
--
SELECT '3.14'::gtype + '3.14'::gtype;
 ?column? 
----------
 6.28
(1 row)

SELECT '3.14'::gtype - '3.14'::gtype;
 ?column? 
----------
 0.0
(1 row)

SELECT -'3.14'::gtype;
 ?column? 
----------
 -3.14
(1 row)

SELECT '3.14'::gtype * '3.14'::gtype;
 ?column? 
----------
 9.8596
(1 row)

SELECT '3.14'::gtype / '3.14'::gtype;
 ?column? 
----------
 1.0
(1 row)

SELECT '3.14'::gtype % '3.14'::gtype;
 ?column? 
----------
 0.0
(1 row)

SELECT '3.14'::gtype ^ '2'::gtype;
 ?column? 
----------
 9.8596
(1 row)

SELECT '3'::gtype + '3'::gtype;
 ?column? 
----------
 6
(1 row)

SELECT '3'::gtype + '3.14'::gtype;
 ?column? 
----------
 6.14
(1 row)

SELECT '3'::gtype + '3.14::numeric'::gtype;
   ?column?    
---------------
 6.14::numeric
(1 row)

SELECT '3.14'::gtype + '3.14::numeric'::gtype;
   ?column?    
---------------
 6.28::numeric
(1 row)

SELECT '3.14::numeric'::gtype + '3.14::numeric'::gtype;
   ?column?    
---------------
 6.28::numeric
(1 row)

--
-- Test orderability of comparison operators =, <>, <, >, <=, >=
-- These should all return true
-- Integer
SELECT gtype_in('1') = gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('-2');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') < gtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') > gtype_in('-2');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <= gtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') >= gtype_in('-2');
 ?column? 
----------
 t
(1 row)

-- Float
SELECT gtype_in('1.01') = gtype_in('1.01');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <> gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <> gtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') < gtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') > gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <= gtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') >= gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') < gtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') > gtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

-- NaN, under ordering, is considered to be the biggest numeric value
-- greater than positive infinity. So, greater than any other number.
SELECT gtype_in('1.01') < gtype_in('NaN');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('NaN') > gtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('NaN') > gtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('NaN') = gtype_in('NaN');
 ?column? 
----------
 t
(1 row)

-- Mixed Integer and Float
SELECT gtype_in('1') = gtype_in('1.0');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') < gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') > gtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <= gtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') >= gtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') < gtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') > gtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') < gtype_in('NaN');
 ?column? 
----------
 t
(1 row)

-- Mixed Float and Integer
SELECT gtype_in('1.0') = gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.001') <> gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('0.999999') <> gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.001') > gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('0.999999') < gtype_in('1');
 ?column? 
----------
 t
(1 row)

-- Mixed Integer and Numeric
SELECT gtype_in('1') = gtype_in('1::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('2::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <> gtype_in('-2::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') < gtype_in('2::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') > gtype_in('-2::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') <= gtype_in('2::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1') >= gtype_in('-2::numeric');
 ?column? 
----------
 t
(1 row)

-- Mixed Float and Numeric
SELECT gtype_in('1.01') = gtype_in('1.01::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <> gtype_in('1.001::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <> gtype_in('1.011::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') < gtype_in('1.011::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') > gtype_in('1.001::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') <= gtype_in('1.011::numeric');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1.01') >= gtype_in('1.001::numeric');
 ?column? 
----------
 t
(1 row)

-- Strings
SELECT gtype_in('"a"') = gtype_in('"a"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"a"') <> gtype_in('"b"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"a"') < gtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"b"') > gtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"a"') <= gtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"b"') >= gtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

-- Lists
SELECT gtype_in('[0, 1, null, 2]') = gtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[0, 1, null, 2]') <> gtype_in('[2, null, 1, 0]');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[0, 1, null]') < gtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1, 1, null, 2]') > gtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

-- Objects (Maps)
SELECT gtype_in('{"bool":true, "null": null}') = gtype_in('{"null":null, "bool":true}');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true}') < gtype_in('{"bool":true, "null": null}');
 ?column? 
----------
 t
(1 row)

-- Comparisons between types
-- Object < List < String < Boolean < Integer = Float = Numeric < Null
SELECT gtype_in('1') < gtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('NaN') < gtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('Infinity') < gtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < gtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < gtype_in('NaN');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < gtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"string"') < gtype_in('true');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1,3,5,7,9,11]') < gtype_in('"string"');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true, "integer":1}') < gtype_in('[1,3,5,7,9,11]');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1, "string"]') < gtype_in('[1, 1]');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true, "integer":1}') < gtype_in('{"bool":true, "integer":null}');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1::numeric') < gtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < gtype_in('1::numeric');
 ?column? 
----------
 t
(1 row)

-- Lists
SELECT gtype_in('[0, 1, null, 2]') = '[0, 1, null, 2]';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[0, 1, null, 2]') <> '[2, null, 1, 0]';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[0, 1, null]') < '[0, 1, null, 2]';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1, 1, null, 2]') > '[0, 1, null, 2]';
 ?column? 
----------
 t
(1 row)

-- Objects (Maps)
SELECT gtype_in('{"bool":true, "null": null}') = '{"null":null, "bool":true}';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true}') < '{"bool":true, "null": null}';
 ?column? 
----------
 t
(1 row)

-- Comparisons between types
-- Object < List < String < Boolean < Integer = Float = Numeric < Null
SELECT gtype_in('1') < 'null';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('NaN') < 'null';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('Infinity') < 'null';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < '1';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < 'NaN';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < 'Infinity';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('"string"') < 'true';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1,3,5,7,9,11]') < '"string"';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true, "integer":1}') < '[1,3,5,7,9,11]';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('[1, "string"]') < '[1, 1]';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('{"bool":true, "integer":1}') < '{"bool":true, "integer":null}';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('1::numeric') < 'null';
 ?column? 
----------
 t
(1 row)

SELECT gtype_in('true') < '1::numeric';
 ?column? 
----------
 t
(1 row)

--
-- Test gtype to boolean cast
--
SELECT gtype_to_bool(gtype_in('true'));
 gtype_to_bool 
---------------
 t
(1 row)

SELECT gtype_to_bool(gtype_in('false'));
 gtype_to_bool 
---------------
 f
(1 row)

-- These should all fail
SELECT gtype_to_bool(gtype_in('null'));
ERROR:  cannot cast gtype null to type boolean
SELECT gtype_to_bool(gtype_in('1'));
ERROR:  cannot cast gtype integer to type boolean
SELECT gtype_to_bool(gtype_in('1.0'));
ERROR:  cannot cast gtype float to type boolean
SELECT gtype_to_bool(gtype_in('"string"'));
ERROR:  cannot cast gtype string to type boolean
SELECT gtype_to_bool(gtype_in('[1,2,3]'));
ERROR:  cannot cast gtype array to type boolean
SELECT gtype_to_bool(gtype_in('{"bool":true}'));
ERROR:  cannot cast gtype object to type boolean
--
-- Test boolean to gtype cast
--
SELECT bool_to_gtype(true);
 bool_to_gtype 
---------------
 true
(1 row)

SELECT bool_to_gtype(false);
 bool_to_gtype 
---------------
 false
(1 row)

SELECT bool_to_gtype(null);
 bool_to_gtype 
---------------
 
(1 row)

SELECT bool_to_gtype(true) = bool_to_gtype(true);
 ?column? 
----------
 t
(1 row)

SELECT bool_to_gtype(true) <> bool_to_gtype(false);
 ?column? 
----------
 t
(1 row)

--
-- Test gtype to int[]
--
SELECT gtype_to_int4_array(gtype_in('[1,2,3]'));
 gtype_to_int4_array 
---------------------
 {1,2,3}
(1 row)

SELECT gtype_to_int4_array(gtype_in('[1.6,2.3,3.66]'));
 gtype_to_int4_array 
---------------------
 {2,2,4}
(1 row)

SELECT gtype_to_int4_array(gtype_in('["6","7",3.66]'));
 gtype_to_int4_array 
---------------------
 {6,7,4}
(1 row)

--
-- Test gtype to bigint[]
--
SELECT gtype_to_int8_array(gtype_in('[1,2,3]'));
 gtype_to_int8_array 
---------------------
 {1,2,3}
(1 row)

SELECT gtype_to_int8_array(gtype_in('[1.6,2.3,3.66]'));
 gtype_to_int8_array 
---------------------
 {2,2,4}
(1 row)

SELECT gtype_to_int8_array(gtype_in('["6","7",3.66]'));
 gtype_to_int8_array 
---------------------
 {6,7,4}
(1 row)

--
-- Map Literal
--
--Invalid Map Key (should fail)
SELECT gtype_build_map('[0]'::gtype, null);
ERROR:  key value must be scalar, not array, composite, or json
--
-- Test gtype object/array access operators object.property, object["property"], and array[element]
--
SELECT i, pg_typeof(i) FROM (SELECT '{"bool":true, "array":[1,3,{"bool":false, "int":3, "float":3.14},7], "float":3.14}'::gtype->'array'::text->2->'float'::text as i) a;
  i   | pg_typeof 
------+-----------
 3.14 | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":true, "array":[1,3,{"bool":false, "int":3, "float":3.14},7], "float":3.14}'::gtype->'array'::text->2->>'float' as i) a;
  i   | pg_typeof 
------+-----------
 3.14 | text
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{}'::gtype->'array'::text as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[]'::gtype->0 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[0, 1]'::gtype->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[0, 1]'::gtype->3 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->'true'::text as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->'true'::text->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->'true'::text->>2 as i) a;
 i | pg_typeof 
---+-----------
   | text
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":true, "array":[1,3,{"bool":false, "int":3, "float":3.14},7], "float":3.14}'::gtype->'"array"'::gtype->2->'"float"'::gtype as i) a;
  i   | pg_typeof 
------+-----------
 3.14 | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{}'::gtype->'"array"'::gtype as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[]'::gtype->0 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[0, 1]'::gtype->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '[0, 1]'::gtype->3 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->'"true"'::gtype as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

SELECT i, pg_typeof(i) FROM (SELECT '{"bool":false, "int":3, "float":3.14}'::gtype->'"true"'::gtype->2 as i) a;
 i | pg_typeof 
---+-----------
   | gtype
(1 row)

--
-- Vertex
--
--Basic Vertex Creation
SELECT _gtype_build_vertex('1'::graphid, $$label_name$$, gtype_build_map());
                    _gtype_build_vertex                     
------------------------------------------------------------
 {"id": 1, "label": "label_name", "properties": {}}::vertex
(1 row)

SELECT _gtype_build_vertex('1'::graphid, $$label$$, gtype_build_map('id', 2));
                     _gtype_build_vertex                      
--------------------------------------------------------------
 {"id": 1, "label": "label", "properties": {"id": 2}}::vertex
(1 row)

--Null properties
SELECT _gtype_build_vertex('1'::graphid, $$label_name$$, NULL);
                    _gtype_build_vertex                     
------------------------------------------------------------
 {"id": 1, "label": "label_name", "properties": {}}::vertex
(1 row)

SELECT _gtype_build_vertex('1'::graphid, $$label$$, gtype_build_list());
ERROR:  _gtype_build_vertex() properties argument must be an object
--Vertex in a map
SELECT gtype_build_map(
	'vertex',
	_gtype_build_vertex('1'::graphid, $$label_name$$, gtype_build_map()));
                            gtype_build_map                             
------------------------------------------------------------------------
 {"vertex": {"id": 1, "label": "label_name", "properties": {}}::vertex}
(1 row)

--Vertex in a list
SELECT gtype_build_list(
	_gtype_build_vertex('1'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()));
                                                     gtype_build_list                                                     
--------------------------------------------------------------------------------------------------------------------------
 [{"id": 1, "label": "label_name", "properties": {}}::vertex, {"id": 2, "label": "label_name", "properties": {}}::vertex]
(1 row)

--
-- Edge
--
--Basic Edge Creation
SELECT _gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label_name$$, gtype_build_map());
                                  _gtype_build_edge                                   
--------------------------------------------------------------------------------------
 {"id": 1, "label": "label_name", "end_id": 3, "start_id": 2, "properties": {}}::edge
(1 row)

SELECT _gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2));
                                   _gtype_build_edge                                    
----------------------------------------------------------------------------------------
 {"id": 1, "label": "label", "end_id": 3, "start_id": 2, "properties": {"id": 2}}::edge
(1 row)

--Null properties
SELECT _gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label_name$$, NULL);
                                  _gtype_build_edge                                   
--------------------------------------------------------------------------------------
 {"id": 1, "label": "label_name", "end_id": 3, "start_id": 2, "properties": {}}::edge
(1 row)

--Edge in a map
SELECT gtype_build_map(
	'edge',
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			   $$label_name$$, gtype_build_map()));
                                        gtype_build_map                                         
------------------------------------------------------------------------------------------------
 {"edge": {"id": 1, "label": "label_name", "end_id": 3, "start_id": 2, "properties": {}}::edge}
(1 row)

--Edge in a list
SELECT gtype_build_list(
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			   $$label_name$$, gtype_build_map()),
	_gtype_build_edge('2'::graphid, '2'::graphid, '3'::graphid,
			   $$label_name$$, gtype_build_map()));
                                                                               gtype_build_list                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 1, "label": "label_name", "end_id": 3, "start_id": 2, "properties": {}}::edge, {"id": 2, "label": "label_name", "end_id": 3, "start_id": 2, "properties": {}}::edge]
(1 row)

SELECT _gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2)),
	_gtype_build_vertex('3'::graphid, $$label_name$$, gtype_build_map())
);
                                                                                                   _gtype_build_path                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 2, "label": "label_name", "properties": {}}::vertex, {"id": 1, "label": "label", "end_id": 3, "start_id": 2, "properties": {"id": 2}}::edge, {"id": 3, "label": "label_name", "properties": {}}::vertex]::path
(1 row)

--All these paths should produce Errors
SELECT _gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2))
);
ERROR:  a path is of the form: [vertex, (edge, vertex)*i] where i >= 0
SELECT _gtype_build_path(
       _gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
       _gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
                         $$label$$, gtype_build_map('id', 2)),
       _gtype_build_vertex('3'::graphid, $$label_name$$, gtype_build_map()),
       _gtype_build_edge('1'::graphid, '4'::graphid, '5'::graphid,
                         $$label$$, gtype_build_map('id', 2))
);
ERROR:  a path is of the form: [vertex, (edge, vertex)*i] where i >= 0
SELECT _gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2)),
	NULL
);
ERROR:  argument 3 must not be null
SELECT _gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2)),
	1
);
ERROR:  argument 3 must be an gtype
SELECT _gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2)),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2))
);
ERROR:  paths consist of alternating vertices and edges
HINT:  argument 3 must be an vertex
--
-- id, startid, endid
--
SELECT age_id(_gtype_build_vertex('1'::graphid, $$label_name$$, gtype_build_map()));
 age_id 
--------
 1
(1 row)

SELECT age_id(_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label_name$$, gtype_build_map('id', 2)));
 age_id 
--------
 1
(1 row)

SELECT age_start_id(_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label_name$$, gtype_build_map('id', 2)));
 age_start_id 
--------------
 2
(1 row)

SELECT age_end_id(_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label_name$$, gtype_build_map('id', 2)));
 age_end_id 
------------
 3
(1 row)

SELECT age_id(_gtype_build_path(
	_gtype_build_vertex('2'::graphid, $$label_name$$, gtype_build_map()),
	_gtype_build_edge('1'::graphid, '2'::graphid, '3'::graphid,
			  $$label$$, gtype_build_map('id', 2)),
	_gtype_build_vertex('3'::graphid, $$label$$, gtype_build_map('id', 2))
));
ERROR:  properties() argument must be a vertex or edge
SELECT age_id(gtype_in('1'));
ERROR:  properties() argument must be a vertex or edge
SELECT age_id(NULL);
ERROR:  function age_id(unknown) is not unique
LINE 1: SELECT age_id(NULL);
               ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT age_start_id(NULL);
ERROR:  function age_start_id(unknown) is not unique
LINE 1: SELECT age_start_id(NULL);
               ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT age_end_id(NULL);
ERROR:  function age_end_id(unknown) is not unique
LINE 1: SELECT age_end_id(NULL);
               ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
SELECT age_id(gtype_in('null'));
 age_id 
--------
 
(1 row)

SELECT age_start_id(gtype_in('null'));
 age_start_id 
--------------
 
(1 row)

SELECT age_end_id(gtype_in('null'));
 age_end_id 
------------
 
(1 row)

SELECT gtype_contains('{"id": 1}','{"id": 1}');
 gtype_contains 
----------------
 t
(1 row)

SELECT gtype_contains('{"id": 1}','{"id": 2}');
 gtype_contains 
----------------
 f
(1 row)

SELECT '{"id": 1}'::gtype @> '{"id": 1}';
 ?column? 
----------
 t
(1 row)

SELECT '{"id": 1}'::gtype @> '{"id": 2}';
 ?column? 
----------
 f
(1 row)

SELECT gtype_exists('{"id": 1}','id');
 gtype_exists 
--------------
 t
(1 row)

SELECT gtype_exists('{"id": 1}','not_id');
 gtype_exists 
--------------
 f
(1 row)

SELECT '{"id": 1}'::gtype ? 'id';
 ?column? 
----------
 t
(1 row)

SELECT '{"id": 1}'::gtype ? 'not_id';
 ?column? 
----------
 f
(1 row)

SELECT gtype_exists_any('{"id": 1}', array['id']);
 gtype_exists_any 
------------------
 t
(1 row)

SELECT gtype_exists_any('{"id": 1}', array['not_id']);
 gtype_exists_any 
------------------
 f
(1 row)

SELECT '{"id": 1}'::gtype ?| array['id'];
 ?column? 
----------
 t
(1 row)

SELECT '{"id": 1}'::gtype ?| array['not_id'];
 ?column? 
----------
 f
(1 row)

SELECT gtype_exists_all('{"id": 1}', array['id']);
 gtype_exists_all 
------------------
 t
(1 row)

SELECT gtype_exists_all('{"id": 1}', array['not_id']);
 gtype_exists_all 
------------------
 f
(1 row)

SELECT '{"id": 1}'::gtype ?& array['id'];
 ?column? 
----------
 t
(1 row)

SELECT '{"id": 1}'::gtype ?& array['not_id'];
 ?column? 
----------
 f
(1 row)

--
-- Test STARTS WITH, ENDS WITH, and CONTAINS
--
SELECT gtype_string_match_starts_with('"abcdefghijklmnopqrstuvwxyz"', '"abcd"');
 gtype_string_match_starts_with 
--------------------------------
 true
(1 row)

SELECT gtype_string_match_ends_with('"abcdefghijklmnopqrstuvwxyz"', '"wxyz"');
 gtype_string_match_ends_with 
------------------------------
 true
(1 row)

SELECT gtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"abcd"');
 gtype_string_match_contains 
-----------------------------
 true
(1 row)

SELECT gtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"hijk"');
 gtype_string_match_contains 
-----------------------------
 true
(1 row)

SELECT gtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"wxyz"');
 gtype_string_match_contains 
-----------------------------
 true
(1 row)

-- should all fail
SELECT gtype_string_match_starts_with('"abcdefghijklmnopqrstuvwxyz"', '"bcde"');
 gtype_string_match_starts_with 
--------------------------------
 false
(1 row)

SELECT gtype_string_match_ends_with('"abcdefghijklmnopqrstuvwxyz"', '"vwxy"');
 gtype_string_match_ends_with 
------------------------------
 false
(1 row)

SELECT gtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"hijl"');
 gtype_string_match_contains 
-----------------------------
 false
(1 row)

--Agtype Hash Comparison Function
SELECT gtype_hash_cmp(NULL);
 gtype_hash_cmp 
----------------
              0
(1 row)

SELECT gtype_hash_cmp('1'::gtype);
 gtype_hash_cmp 
----------------
     -123017199
(1 row)

SELECT gtype_hash_cmp('1.0'::gtype);
 gtype_hash_cmp 
----------------
      614780178
(1 row)

SELECT gtype_hash_cmp('"1"'::gtype);
 gtype_hash_cmp 
----------------
     -888576106
(1 row)

SELECT gtype_hash_cmp('[1]'::gtype);
 gtype_hash_cmp 
----------------
      434414509
(1 row)

SELECT gtype_hash_cmp('[1, 1]'::gtype);
 gtype_hash_cmp 
----------------
    -1551022880
(1 row)

SELECT gtype_hash_cmp('[1, 1, 1]'::gtype);
 gtype_hash_cmp 
----------------
       -3900769
(1 row)

SELECT gtype_hash_cmp('[1, 1, 1, 1]'::gtype);
 gtype_hash_cmp 
----------------
     1756986519
(1 row)

SELECT gtype_hash_cmp('[1, 1, 1, 1, 1]'::gtype);
 gtype_hash_cmp 
----------------
      -47741579
(1 row)

SELECT gtype_hash_cmp('[[1]]'::gtype);
 gtype_hash_cmp 
----------------
      878744030
(1 row)

SELECT gtype_hash_cmp('[[1, 1]]'::gtype);
 gtype_hash_cmp 
----------------
    -1254522284
(1 row)

SELECT gtype_hash_cmp('[[1], 1]'::gtype);
 gtype_hash_cmp 
----------------
       -1005036
(1 row)

SELECT gtype_hash_cmp('[1543872]'::gtype);
 gtype_hash_cmp 
----------------
    -1925093371
(1 row)

SELECT gtype_hash_cmp('[1, "abcde", 2.0]'::gtype);
 gtype_hash_cmp 
----------------
    -1128310748
(1 row)

SELECT gtype_hash_cmp(gtype_in('null'));
 gtype_hash_cmp 
----------------
     -505290271
(1 row)

SELECT gtype_hash_cmp(gtype_in('[null]'));
 gtype_hash_cmp 
----------------
      505290241
(1 row)

SELECT gtype_hash_cmp(gtype_in('[null, null]'));
 gtype_hash_cmp 
----------------
              3
(1 row)

SELECT gtype_hash_cmp(gtype_in('[null, null, null]'));
 gtype_hash_cmp 
----------------
     2021160967
(1 row)

SELECT gtype_hash_cmp(gtype_in('[null, null, null, null]'));
 gtype_hash_cmp 
----------------
             15
(1 row)

SELECT gtype_hash_cmp(gtype_in('[null, null, null, null, null]'));
 gtype_hash_cmp 
----------------
     -505290721
(1 row)

SELECT gtype_hash_cmp('{"id":1, "label":"test", "properties":{"id":100}}'::gtype);
 gtype_hash_cmp 
----------------
     1116453668
(1 row)

SELECT gtype_hash_cmp('{"id":1, "label":"test", "properties":{"id":100}}::vertex'::gtype);
 gtype_hash_cmp 
----------------
     1848106598
(1 row)

SELECT gtype_hash_cmp('{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{}}'::gtype);
 gtype_hash_cmp 
----------------
     1064722414
(1 row)

SELECT gtype_hash_cmp('{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{}}::edge'::gtype);
 gtype_hash_cmp 
----------------
    -1790838958
(1 row)

SELECT gtype_hash_cmp('
	[{"id":1, "label":"test", "properties":{"id":100}}::vertex,
	 {"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{}}::edge,
	 {"id":5, "label":"vlabel", "properties":{}}::vertex]'::gtype);
 gtype_hash_cmp 
----------------
     -231467898
(1 row)

--Agtype BTree Comparison Function
SELECT gtype_btree_cmp('1'::gtype, '1'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp('1'::gtype, '1.0'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp('1'::gtype, '"1"'::gtype);
 gtype_btree_cmp 
-----------------
               1
(1 row)

SELECT gtype_btree_cmp('"string"'::gtype, '"string"'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp('"string"'::gtype, '"string "'::gtype);
 gtype_btree_cmp 
-----------------
              -1
(1 row)

SELECT gtype_btree_cmp(NULL, NULL);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(NULL, '1'::gtype);
 gtype_btree_cmp 
-----------------
               1
(1 row)

SELECT gtype_btree_cmp('1'::gtype, NULL);
 gtype_btree_cmp 
-----------------
              -1
(1 row)

SELECT gtype_btree_cmp(gtype_in('null'), NULL);
 gtype_btree_cmp 
-----------------
              -1
(1 row)

SELECT gtype_btree_cmp(
	'1'::gtype,
	'{"id":1, "label":"test", "properties":{"id":100}}::vertex'::gtype);
 gtype_btree_cmp 
-----------------
               1
(1 row)

SELECT gtype_btree_cmp(
	'{"id":1, "label":"test", "properties":{"id":100}}'::gtype,
	'{"id":1, "label":"test", "properties":{"id":100}}'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(
	'{"id":1, "label":"test", "properties":{"id":100}}'::gtype,
	'{"id":1, "label":"test", "properties":{"id":200}}'::gtype);
 gtype_btree_cmp 
-----------------
              -1
(1 row)

SELECT gtype_btree_cmp(
	'{"id":1, "label":"test", "properties":{"id":100}}::vertex'::gtype,
	'{"id":1, "label":"test", "properties":{"id":100}}::vertex'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(
	'{"id":1, "label":"test", "properties":{"id":100}}::vertex'::gtype,
	'{"id":1, "label":"test", "properties":{"id":200}}::vertex'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(
	'{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{}}::edge'::gtype,
	'{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{}}::edge'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(
	'{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{"prop1": 1}}::edge'::gtype,
	'{"id":2, "start_id":4, "end_id": 5, "label":"elabel", "properties":{"prop2": 2}}::edge'::gtype);
 gtype_btree_cmp 
-----------------
               0
(1 row)

SELECT gtype_btree_cmp(
	'{"id":2, "start_id":1, "end_id": 3, "label":"elabel", "properties":{"prop1": 1}}::edge'::gtype,
	'{"id":8, "start_id":4, "end_id": 5, "label":"elabel", "properties":{"prop2": 2}}::edge'::gtype);
 gtype_btree_cmp 
-----------------
              -1
(1 row)

--
-- Cleanup
--
DROP TABLE gtype_table;
--
-- End of AGTYPE data type regression tests
--
